"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6348],{3774:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(6672);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}},6423:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"dynamics-system","title":"What is a Dynamics System?","description":"Understanding jods as a JavaScript Object Dynamics System","source":"@site/docs/dynamics-system.md","sourceDirName":".","slug":"/dynamics-system","permalink":"/fr/dynamics-system","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/dynamics-system.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"What is a Dynamics System?","description":"Understanding jods as a JavaScript Object Dynamics System"}}');var i=t(3420),a=t(3774);const o={sidebar_position:2,title:"What is a Dynamics System?",description:"Understanding jods as a JavaScript Object Dynamics System"},r="\ud83e\udde0 What is a Dynamics System?",l={},d=[{value:"\ud83d\udd04 Beyond Traditional State Management",id:"-beyond-traditional-state-management",level:2},{value:"\ud83d\udca1 The jods Philosophy",id:"-the-jods-philosophy",level:2},{value:"\ud83d\udd0d How is a Dynamics System Different?",id:"-how-is-a-dynamics-system-different",level:2},{value:"\u26a1 The Power of Dynamics: Code Examples",id:"-the-power-of-dynamics-code-examples",level:2},{value:"\ud83e\udd8b Dynamic Adaptability",id:"-dynamic-adaptability",level:2},{value:"\ud83c\udfd7\ufe0f Dynamics in a Full-Stack Context",id:"\ufe0f-dynamics-in-a-full-stack-context",level:2},{value:"\ud83e\udd1d Why &quot;Dynamics&quot; Matters for AI Collaboration \ud83e\udd16 \ud83e\udde0",id:"-why-dynamics-matters-for-ai-collaboration--",level:2},{value:"\ud83c\udf1f A living model of your application",id:"-a-living-model-of-your-application",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-what-is-a-dynamics-system",children:"\ud83e\udde0 What is a Dynamics System?"})}),"\n",(0,i.jsx)("div",{style:{float:"right",margin:"0 0 20px 20px",maxWidth:"50%"},children:(0,i.jsx)("img",{src:"img/articles/dynamic-system/mascots-and-the-system.png",alt:"jods mascots and the dynamics system",style:{width:"100%",borderRadius:"8px",boxShadow:"0 4px 8px rgba(0,0,0,0.1)"}})}),"\n",(0,i.jsx)(n.h2,{id:"-beyond-traditional-state-management",children:"\ud83d\udd04 Beyond Traditional State Management"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"Dynamics System"})," represents a significant evolution in how we think about state management in JavaScript applications. Unlike traditional state management solutions that focus solely on storing and updating values, a Dynamics System creates a ",(0,i.jsx)(n.em,{children:"living, responsive ecosystem"})," where objects intuitively react to changes, compute derived values, and maintain consistency across your application."]}),"\n",(0,i.jsx)(n.h2,{id:"-the-jods-philosophy",children:"\ud83d\udca1 The jods Philosophy"}),"\n",(0,i.jsxs)(n.p,{children:["jods (",(0,i.jsx)(n.strong,{children:"J"}),"avaScript ",(0,i.jsx)(n.strong,{children:"O"}),"bject ",(0,i.jsx)(n.strong,{children:"D"}),"ynamics ",(0,i.jsx)(n.strong,{children:"S"}),"ystem) takes a fundamentally different approach than other state libraries. Rather than requiring you to learn complex patterns, middlewares, or actions/reducers, jods embraces the natural way developers already work with JavaScript objects."]}),"\n",(0,i.jsx)(n.p,{children:"At its core, a Dynamics System:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udcf1 Feels Natural"}),": Uses direct mutations (",(0,i.jsx)(n.code,{children:'user.name = "Burt"'}),") instead of verbose action dispatchers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udd04 Reacts Intelligently"}),": Automatically tracks dependencies and triggers updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83e\uddee Computes Effortlessly"}),": Handles derived values through simple function declarations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udcf7 Snapshots Seamlessly"}),": Creates consistent, serializable snapshots of application state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83e\uddec Bridges Environments"}),": Works the same way on client, server, or any JavaScript environment"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-how-is-a-dynamics-system-different",children:"\ud83d\udd0d How is a Dynamics System Different?"}),"\n",(0,i.jsx)(n.p,{children:"Let's compare jods with some other popular approaches:"}),"\n",(0,i.jsx)("div",{className:"table-container",id:"compare",style:{width:"100%",maxWidth:"900px",margin:"0 auto",overflowX:"auto",borderRadius:"8px",boxShadow:"0 4px 15px rgba(0, 0, 0, 0.1)"},children:(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"FEATURE"}),(0,i.jsx)(n.th,{children:"TRADITIONAL OBJECT"}),(0,i.jsx)(n.th,{children:"REDUX"}),(0,i.jsx)(n.th,{children:"ZUSTAND"}),(0,i.jsx)(n.th,{children:"JODS (DYNAMICS SYSTEM)"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Updating state"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'obj.name = "Burt"'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'dispatch(setName("Burt"))'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'setState({name: "Burt"})'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'user.name = "Burt"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Reactivity"}),(0,i.jsx)(n.td,{children:"None"}),(0,i.jsx)(n.td,{children:"Manual subscriptions"}),(0,i.jsx)(n.td,{children:"Selector functions"}),(0,i.jsx)(n.td,{children:"Automatic + granular"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Computed values"}),(0,i.jsx)(n.td,{children:"Manual functions"}),(0,i.jsx)(n.td,{children:"Selector functions"}),(0,i.jsx)(n.td,{children:"Selector functions"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'computed(() => user.firstName + " " + user.lastName)'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Serialization"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"JSON.stringify(obj)"})}),(0,i.jsx)(n.td,{children:"Need custom serializers"}),(0,i.jsx)(n.td,{children:"Need custom serializers"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"json(user)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Framework integration"}),(0,i.jsx)(n.td,{children:"None"}),(0,i.jsx)(n.td,{children:"Requires connectors"}),(0,i.jsx)(n.td,{children:"Hooks"}),(0,i.jsx)(n.td,{children:"Lightweight direct hooks"})]})]})]})}),"\n",(0,i.jsx)(n.h2,{id:"-the-power-of-dynamics-code-examples",children:"\u26a1 The Power of Dynamics: Code Examples"}),"\n",(0,i.jsx)(n.p,{children:"Let's see how a Dynamics System makes development more intuitive:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { store, computed, onUpdate, json, diff } from \"jods\";\n\n// Create a reactive store\nconst user = store({\n  firstName: \"Burt\",\n  lastName: \"Macklin\",\n  age: 36,\n  department: \"FBI\",\n});\n\n// Add a computed property - recalculates only when dependencies change\nuser.fullName = computed(() => `${user.firstName} ${user.lastName}`);\n\n// Subscribe to changes with both new and old state\nonUpdate(user, (newState, oldState) => {\n  console.log(\"Previous state:\", json(oldState));\n  console.log(\"Current state:\", json(newState));\n\n  // Agent Macklin investigates the changes with diff()\n  const changes = diff(oldState, newState);\n  console.log(\"Agent Macklin's case file:\", changes);\n  console.log(\n    \"Macklin: 'I've identified all the changes. Just as I suspected!'\"\n  );\n});\n// Make changes directly - feels like regular JavaScript!\nuser.firstName = \"FBI Agent\";\n// Logs:\n// Previous state: {\n//   firstName: 'Burt',\n//   lastName: 'Macklin',\n//   age: 36,\n//   department: 'FBI',\n//   fullName: 'Burt Macklin'\n// }\n// Current state: {\n//   firstName: 'FBI Agent',\n//   lastName: 'Macklin',\n//   age: 36,\n//   department: 'FBI',\n//   fullName: 'FBI Agent Macklin'\n// }\n// Agent Macklin's case file: {\n//   firstName: { from: 'Burt', to: 'FBI Agent' },\n//   fullName: { from: 'Burt Macklin', to: 'FBI Agent Macklin' }\n// }\n// Macklin: 'I've identified all the changes. Just as I suspected!'\n\n// Multiple properties can be changed in a single update\nObject.assign(user, {\n  lastName: \"Macklin Jr.\",\n  age: 37,\n  department: \"Special Agent Division\",\n});\n// The diff() will show all changes at once, and computed properties update automatically\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-dynamic-adaptability",children:"\ud83e\udd8b Dynamic Adaptability"}),"\n",(0,i.jsx)(n.p,{children:"A key aspect of a Dynamics System is its ability to adapt to how developers and AI work together \ud83e\uddd1\u200d\ud83d\udcbb\ud83e\udd16. As AI becomes increasingly important for code generation and maintenance, jods provides a model that:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83e\udd16 Works with AI coding"}),": Predictable patterns make it easy for AI tools to understand and modify"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udcdd Requires minimal boilerplate"}),": Focus on business logic, not plumbing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\u26a1 Integrates anywhere"}),": Works with React, Preact, Remix, or vanilla JS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udd0d Makes debugging easy"}),": Time-travel debugging with ",(0,i.jsx)(n.code,{children:"history(store)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud83e\udde9 Composes naturally"}),": Build complex state by combining simple pieces"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-dynamics-in-a-full-stack-context",children:"\ud83c\udfd7\ufe0f Dynamics in a Full-Stack Context"}),"\n",(0,i.jsx)(n.p,{children:"In a full-stack application, particularly with frameworks like Remix, a Dynamics System serves as the perfect bridge between server and client state:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Define a model once with jods/remix\nexport const todoStore = defineStore({\n  name: "todos",\n  schema: z.object({\n    items: z.array(\n      z.object({\n        id: z.string(),\n        text: z.string(),\n        completed: z.boolean(),\n      })\n    ),\n    filter: z.enum(["all", "active", "completed"]),\n  }),\n  // Server-side handler\n  handlers: {\n    async addTodo({ current, form }) {\n      return {\n        ...current,\n        items: [\n          ...current.items,\n          {\n            id: crypto.randomUUID(),\n            text: form.get("text"),\n            completed: false,\n          },\n        ],\n      };\n    },\n  },\n});\n\n// Use in component with the same simple API\nfunction TodoApp() {\n  const todos = useJodsStore(todoStore);\n  const form = useJodsForm(todoStore.actions.addTodo);\n\n  return (\n    <div>\n      <form {...form.props}>\n        <input name="text" />\n        <button type="submit">Add</button>\n      </form>\n      <ul>\n        {todos.items.map((item) => (\n          <li key={item.id}>\n            <input\n              type="checkbox"\n              checked={item.completed}\n              onChange={() => (item.completed = !item.completed)}\n            />\n            {item.text}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-why-dynamics-matters-for-ai-collaboration--",children:'\ud83e\udd1d Why "Dynamics" Matters for AI Collaboration \ud83e\udd16 \ud83e\udde0'}),"\n",(0,i.jsx)(n.p,{children:"In the age of AI-assisted coding, the Dynamics System approach unlocks new possibilities. When you and AI tools collaborate on code, jods provides a mental model that:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'\ud83d\udde3\ufe0f Is easy to explain to AI ("update this state directly")'}),"\n",(0,i.jsx)(n.li,{children:"\ud83d\udcbb Is easy for AI to generate correct code for"}),"\n",(0,i.jsx)(n.li,{children:"\ud83d\udcc9 Minimizes boilerplate that AI has to generate"}),"\n",(0,i.jsx)(n.li,{children:"\ud83d\udd04 Provides consistent patterns that AI can understand and maintain"}),"\n",(0,i.jsx)(n.li,{children:"\ud83e\udde9 Allows AI to focus on business logic, not state plumbing"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-a-living-model-of-your-application",children:"\ud83c\udf1f A living model of your application"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"Dynamics System"})," is more than just a state container - it's a living model of your application that reacts, computes, and synchronizes automatically. By embracing the natural way JavaScript works while adding reactivity and computed values, jods creates a development experience that is both simpler and more powerful."]}),"\n",(0,i.jsx)(n.p,{children:"The days of complex state management are coming to an end. \ud83c\udfac"}),"\n",(0,i.jsx)(n.p,{children:"\ud83d\udc4b Welcome to the era of Dynamics Systems, where your objects come alive. \ud83d\udc3f\ufe0f \ud83e\udd86"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);
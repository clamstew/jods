"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8575],{3774:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6672);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},8069:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/framework-integrations","title":"Framework Integrations Guide","description":"This guide documents how jods integrates with popular frontend frameworks and provides best practices for using these integrations.","source":"@site/docs/guides/framework-integrations.md","sourceDirName":"guides","slug":"/guides/framework-integrations","permalink":"/fr/guides/framework-integrations","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/guides/framework-integrations.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"jodsSidebar","previous":{"title":"\ud83d\udcda API Reference","permalink":"/fr/sync/api-reference"},"next":{"title":"\ud83c\udf10 Overview","permalink":"/fr/remix/"}}');var t=i(3420),r=i(3774);const o={sidebar_position:2},l="Framework Integrations Guide",c={},d=[{value:"Framework Integration Architecture",id:"framework-integration-architecture",level:2},{value:"React Integration",id:"react-integration",level:2},{value:"Core Features",id:"core-features",level:3},{value:"Usage Example",id:"usage-example",level:3},{value:"Type Safety",id:"type-safety",level:3},{value:"Enhanced Type Safety Patterns",id:"enhanced-type-safety-patterns",level:4},{value:"Preact Integration",id:"preact-integration",level:2},{value:"Core Features",id:"core-features-1",level:3},{value:"Usage Example",id:"usage-example-1",level:3},{value:"Remix Integration",id:"remix-integration",level:2},{value:"Core Features",id:"core-features-2",level:3},{value:"Usage Example",id:"usage-example-2",level:3},{value:"AI-Optimized Framework Hooks",id:"ai-optimized-framework-hooks",level:2},{value:"Available AI-Optimized Files",id:"available-ai-optimized-files",level:3},{value:"Key Differences in AI-Optimized Files",id:"key-differences-in-ai-optimized-files",level:3},{value:"When to Reference AI-Optimized Files",id:"when-to-reference-ai-optimized-files",level:3},{value:"Common Integration Patterns",id:"common-integration-patterns",level:2},{value:"1. Framework Detection",id:"1-framework-detection",level:3},{value:"2. Hook Patterns",id:"2-hook-patterns",level:3},{value:"3. Computed Value Resolution",id:"3-computed-value-resolution",level:3},{value:"4. Debug Utilities",id:"4-debug-utilities",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"framework-integrations-guide",children:"Framework Integrations Guide"})}),"\n",(0,t.jsx)(n.p,{children:"This guide documents how jods integrates with popular frontend frameworks and provides best practices for using these integrations."}),"\n",(0,t.jsx)(n.h2,{id:"framework-integration-architecture",children:"Framework Integration Architecture"}),"\n",(0,t.jsx)(n.p,{children:"jods provides first-class support for several frontend frameworks through dedicated integration modules:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"src/\n  \u251c\u2500\u2500 frameworks/        # Framework integrations\n  \u2502   \u251c\u2500\u2500 react/         # React integration\n  \u2502   \u251c\u2500\u2500 preact/        # Preact integration\n  \u2502   \u2514\u2500\u2500 remix/         # Remix integration\n  \u2502\n  \u2514\u2500\u2500 utils/ # Utility functions\n"})}),"\n",(0,t.jsx)(n.p,{children:"Each framework integration follows a consistent pattern:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Entry point"}),": ",(0,t.jsx)(n.code,{children:"frameworks/{framework}/index.ts"})," exports all integration features"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hooks"}),": Framework-specific hooks are located within their respective ",(0,t.jsx)(n.code,{children:"src/frameworks/{framework}/"})," directories (e.g., ",(0,t.jsx)(n.code,{children:"useJods.ts"}),", ",(0,t.jsx)(n.code,{children:"useJodsPreact.ts"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Additional utilities"}),": Framework-specific utilities in their respective directories"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"react-integration",children:"React Integration"}),"\n",(0,t.jsx)(n.p,{children:"React integration provides a seamless way to use jods stores in React components."}),"\n",(0,t.jsx)(n.h3,{id:"core-features",children:"Core Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"useJods hook"}),": Automatically subscribes to store changes and updates components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Computed value resolution"}),": Automatically resolves computed properties when accessed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"React lifecycle integration"}),": Handles subscriptions with proper lifecycle methods"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { store } from "jods";\nimport { useJods } from "jods/react";\n\n// Create a store\nconst userStore = store({\n  firstName: "John",\n  lastName: "Doe",\n  fullName: computed(() => `${userStore.firstName} ${userStore.lastName}`),\n});\n\n// Use in a component\nfunction UserProfile() {\n  const user = useJods(userStore);\n\n  return (\n    <div>\n      <h1>{user.fullName}</h1> {/* Computed property auto-resolved */}\n      <input\n        value={user.firstName}\n        onChange={(e) => (user.firstName = e.target.value)}\n      />\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"type-safety",children:"Type Safety"}),"\n",(0,t.jsxs)(n.p,{children:["When using the ",(0,t.jsx)(n.code,{children:"useJods"})," hook with TypeScript, ensure proper type annotations:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"interface UserStore {\n  firstName: string;\n  lastName: string;\n  fullName: string; // Type representing the computed value result\n}\n\n// Properly type the useJods hook\nconst user = useJods<UserStore>(userStore);\n"})}),"\n",(0,t.jsx)(n.p,{children:"When rendering computed values, it's recommended to ensure they're the expected type:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// Explicit conversion to string for computed values\nreturn <div>{String(user.fullName)}</div>;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"enhanced-type-safety-patterns",children:"Enhanced Type Safety Patterns"}),"\n",(0,t.jsxs)(n.p,{children:["For even better type safety with the ",(0,t.jsx)(n.code,{children:"useJods"})," hook, follow these patterns:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Explicit Type Imports"})}),"\n",(0,t.jsx)(n.p,{children:"Import React types explicitly for maximum clarity:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import type { Dispatch, SetStateAction } from "react";\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Explicit Type Assertions for State Management"})}),"\n",(0,t.jsxs)(n.p,{children:["When defining state with ",(0,t.jsx)(n.code,{children:"useState"}),", use explicit type assertions:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// Properly typed with explicit type assertion\nconst [state, setState] = useState(() => store.getState()) as [\n  T,\n  Dispatch<SetStateAction<T>>\n];\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Thorough Type Checking for Computed Values"})}),"\n",(0,t.jsx)(n.p,{children:"When handling computed values in proxies, use comprehensive type checking:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'get(obj, prop) {\n  const value = Reflect.get(obj, prop);\n\n  // Thorough type checking before resolving computed value\n  if (value && typeof value === "function" && isComputed(value)) {\n    return (value as any)();\n  }\n\n  return value;\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Type Guards for Computed Values"})}),"\n",(0,t.jsx)(n.p,{children:"Create type guards to safely check for computed values:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'function isComputedFunction<T>(\n  value: unknown\n): value is (() => T) & { __computed: true } {\n  return (\n    !!value &&\n    typeof value === "function" &&\n    (value as any).__computed === true\n  );\n}\n\n// Then use the guard\nif (isComputedFunction<string>(value)) {\n  return value();\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"preact-integration",children:"Preact Integration"}),"\n",(0,t.jsx)(n.p,{children:"Preact integration follows a similar pattern to React but is optimized for Preact's specific hooks API."}),"\n",(0,t.jsx)(n.h3,{id:"core-features-1",children:"Core Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"useJods hook"}),": Similar to React but using Preact's hooks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Smaller bundle size"}),": Optimized for Preact's smaller footprint"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Equivalent API"}),": Same API as React integration for consistency"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"usage-example-1",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'import { store } from "jods";\nimport { useJods } from "jods/preact";\n\n// Create a store\nconst counterStore = store({ count: 0 });\n\n// Use in a Preact component\nfunction Counter() {\n  const state = useJods(counterStore);\n\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => counterStore.count++}>Increment</button>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"remix-integration",children:"Remix Integration"}),"\n",(0,t.jsx)(n.p,{children:"Remix integration provides more complex features for server-side rendering support."}),"\n",(0,t.jsx)(n.h3,{id:"core-features-2",children:"Core Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"defineStore"}),": Creates a named store that can be registered with the Remix system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"useJods"}),": Unified hook combining store state with form handlers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"useJodsStore"}),": Provides reactive state updates with property tracking"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"useJodsForm"}),": Creates form components that connect to store handlers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Server-side rendering"}),": Supports hydration and dehydration of state"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"usage-example-2",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// Define a store\nimport { defineStore } from "jods/remix";\nimport { j } from "jods";\n\nconst todoStore = defineStore({\n  name: "todos",\n  schema: j.object({\n    items: j.array(\n      j.object({\n        id: j.string(),\n        text: j.string(),\n        completed: j.boolean(),\n      })\n    ),\n  }),\n  initialState: {\n    items: [],\n  },\n  handlers: {\n    // Action handlers\n    addTodo: (store, { text }) => {\n      store.items.push({\n        id: Math.random().toString(36).substr(2, 9),\n        text,\n        completed: false,\n      });\n    },\n    toggleTodo: (store, { id }) => {\n      const todo = store.items.find((item) => item.id === id);\n      if (todo) todo.completed = !todo.completed;\n    },\n  },\n});\n\n// Use in a Remix component\nimport { useJods } from "jods/remix";\n\nexport default function TodoApp() {\n  const { stores, actions } = useJods(todoStore, ["addTodo", "toggleTodo"]);\n\n  return (\n    <div>\n      <h1>Todo List ({stores.items.length})</h1>\n\n      <actions.addTodo.Form>\n        <input name="text" placeholder="Add todo" />\n        <button type="submit">Add</button>\n      </actions.addTodo.Form>\n\n      <ul>\n        {stores.items.map((todo) => (\n          <li key={todo.id}>\n            <actions.toggleTodo.Form>\n              <input type="hidden" name="id" value={todo.id} />\n              <button type="submit">\n                {todo.completed ? "\u2713" : "\u25cb"} {todo.text}\n              </button>\n            </actions.toggleTodo.Form>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"ai-optimized-framework-hooks",children:"AI-Optimized Framework Hooks"}),"\n",(0,t.jsx)(n.p,{children:"jods provides AI-optimized versions of framework hooks to improve context window efficiency when using AI assistants to work with the codebase."}),"\n",(0,t.jsx)(n.h3,{id:"available-ai-optimized-files",children:"Available AI-Optimized Files"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"src/ai/react-useJods.ai.ts"}),": Simplified version of React hook"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"src/ai/preact-useJods.ai.ts"}),": Simplified version of Preact hook"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"src/ai/remix-useJods.ai.tsx"}),": Simplified version of Remix hook"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"src/ai/remix-useJodsStore.ai.tsx"}),": Simplified version of Remix store hook"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"src/ai/remix-useJodsForm.ai.tsx"}),": Simplified version of Remix form hook"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-differences-in-ai-optimized-files",children:"Key Differences in AI-Optimized Files"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simplified implementations"}),": Less code with the same functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Removal of test-specific code"}),": Clean production-focused code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistent debug utilities"}),": Using the ",(0,t.jsx)(n.code,{children:"debug"})," utility instead of console.log"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"More concise comments"}),': Focusing on "why" not "what"']}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"when-to-reference-ai-optimized-files",children:"When to Reference AI-Optimized Files"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"For understanding core concepts"}),": AI-optimized files are easier to understand"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"When working with AI assistants"}),": Reduces token usage for better responses"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Learning the codebase"}),": Clearer picture of how integrations work"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The standard implementation files should be referenced for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implementation details that might be simplified in AI-optimized versions"}),"\n",(0,t.jsx)(n.li,{children:"Test-specific behavior and edge cases"}),"\n",(0,t.jsx)(n.li,{children:"Complete API surface area"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-integration-patterns",children:"Common Integration Patterns"}),"\n",(0,t.jsx)(n.p,{children:"When working with framework integrations, you'll observe these common patterns:"}),"\n",(0,t.jsx)(n.h3,{id:"1-framework-detection",children:"1. Framework Detection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Detecting if running in a specific framework context\nfunction isReactContext() {\n  return (\n    (typeof window !== "undefined" && !!(window as any).React) ||\n    (typeof globalThis !== "undefined" && !!(globalThis as any).React)\n  );\n}\n\n// Using framework detection\nif (isReactContext()) {\n  // Handle React-specific behavior\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-hook-patterns",children:"2. Hook Patterns"}),"\n",(0,t.jsx)(n.p,{children:"All framework hooks follow a consistent pattern:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function useFrameworkHook(store) {\n  // 1. Initialize state with current store state\n  const [state, setState] = useState(() => store.getState());\n\n  // 2. Subscribe to store changes on mount\n  useEffect(() => {\n    const unsubscribe = store.subscribe((newState) => {\n      setState(newState);\n    });\n\n    // 3. Unsubscribe on unmount\n    return unsubscribe;\n  }, [store]);\n\n  // 4. Return state or enhanced state\n  return state;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-computed-value-resolution",children:"3. Computed Value Resolution"}),"\n",(0,t.jsx)(n.p,{children:"Automatic resolution of computed values using proxies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Create a proxy to auto-resolve computed values\nconst proxiedState = new Proxy(state, {\n  get(obj, prop) {\n    const value = Reflect.get(obj, prop);\n\n    // If property is a computed value, call it\n    if (isComputed(value)) {\n      return value();\n    }\n\n    return value;\n  },\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-debug-utilities",children:"4. Debug Utilities"}),"\n",(0,t.jsx)(n.p,{children:"Framework integration code uses the debug utility with framework-specific categories:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { debug } from "../utils/debug";\n\n// React-specific logging\ndebug.log("react", "Setting up store subscription");\n\n// Preact-specific logging\ndebug.log("preact", "Store changed, updating component");\n\n// Remix-specific logging\ndebug.log("remix", "Creating form for handler: " + handler);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.p,{children:"When working with framework integrations:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Use the appropriate hook for your framework"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["React: ",(0,t.jsx)(n.code,{children:"import { useJods } from 'jods/react'"})]}),"\n",(0,t.jsxs)(n.li,{children:["Preact: ",(0,t.jsx)(n.code,{children:"import { useJods } from 'jods/preact'"})]}),"\n",(0,t.jsxs)(n.li,{children:["Remix: ",(0,t.jsx)(n.code,{children:"import { useJods } from 'jods/remix'"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Handle type safety explicitly"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Provide generic type parameters to ",(0,t.jsx)(n.code,{children:"useJods<T>"})]}),"\n",(0,t.jsx)(n.li,{children:"Convert computed values to appropriate types before rendering"}),"\n",(0,t.jsx)(n.li,{children:"Use TypeScript interfaces to document expected store structure"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Maintain framework-specific patterns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Follow React's rules of hooks when working with the React integration"}),"\n",(0,t.jsxs)(n.li,{children:["Use Preact's specific imports (",(0,t.jsx)(n.code,{children:"preact/hooks"}),") for Preact integration"]}),"\n",(0,t.jsx)(n.li,{children:"Follow Remix conventions for Remix integration"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Debug efficiently with debug utility"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Enable debug for specific framework categories as needed"}),"\n",(0,t.jsx)(n.li,{children:"Use consistent debug message formats"}),"\n",(0,t.jsx)(n.li,{children:"Provide meaningful context in debug messages"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.p,{children:"Common issues when working with framework integrations:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Component not updating when store changes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Check that you're using the ",(0,t.jsx)(n.code,{children:"useJods"})," hook, not accessing the store directly"]}),"\n",(0,t.jsx)(n.li,{children:"Verify the component is actually re-rendering when expected"}),"\n",(0,t.jsx)(n.li,{children:"Confirm you're not creating a new store on each render"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type errors with computed values"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure computed values are properly typed"}),"\n",(0,t.jsxs)(n.li,{children:["Use explicit type conversions when rendering (",(0,t.jsx)(n.code,{children:"String()"}),", etc.)"]}),"\n",(0,t.jsx)(n.li,{children:"Define proper TypeScript interfaces for your stores"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"React DevTools showing incorrect values"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This is expected behavior for proxied values"}),"\n",(0,t.jsx)(n.li,{children:"The store itself contains the canonical state"}),"\n",(0,t.jsx)(n.li,{children:"Use the jods debugger for more accurate debugging"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Server/client hydration issues in Remix"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Ensure proper hydration by using ",(0,t.jsx)(n.code,{children:"withJods"})," in loaders"]}),"\n",(0,t.jsx)(n.li,{children:"Check that your store definition is consistent between server and client"}),"\n",(0,t.jsx)(n.li,{children:"Use the rehydration utilities provided by jods/remix"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);
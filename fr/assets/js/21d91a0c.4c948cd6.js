"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1612],{2224:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"zod-integration","title":"Zod Integration with jods","description":"jods provides a lightweight integration with Zod, the TypeScript-first schema validation library. This enables you to validate your store data with powerful schemas.","source":"@site/docs/zod-integration.md","sourceDirName":".","slug":"/zod-integration","permalink":"/jods/fr/zod-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/zod-integration.md","tags":[],"version":"current","frontMatter":{}}');var t=o(3420),d=o(3774);const i={},r="Zod Integration with jods",a={},l=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"1. Standard Zod Import",id:"1-standard-zod-import",level:3},{value:"2. Using j/jod Aliases (Curated Subset)",id:"2-using-jjod-aliases-curated-subset",level:3},{value:"With Remix Integration",id:"with-remix-integration",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Type Inference",id:"type-inference",level:2},{value:"Important Notes",id:"important-notes",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"zod-integration-with-jods",children:"Zod Integration with jods"})}),"\n",(0,t.jsxs)(n.p,{children:["jods provides a lightweight integration with ",(0,t.jsx)(n.a,{href:"https://github.com/colinhacks/zod",children:"Zod"}),", the TypeScript-first schema validation library. This enables you to validate your store data with powerful schemas."]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"To use Zod with jods, you need to install Zod as a dependency:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install zod\n# or\nyarn add zod\n# or\npnpm add zod\n"})}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.p,{children:"There are two ways to use Zod with jods:"}),"\n",(0,t.jsx)(n.h3,{id:"1-standard-zod-import",children:"1. Standard Zod Import"}),"\n",(0,t.jsxs)(n.p,{children:["The most direct and ",(0,t.jsx)(n.strong,{children:"recommended way for full functionality"})," is to import Zod's ",(0,t.jsx)(n.code,{children:"z"})," directly:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { store } from "jods";\nimport { z } from "zod";\n\n// Define your schema with Zod\nconst TodoSchema = z.object({\n  id: z.string(),\n  title: z.string().min(3),\n  completed: z.boolean().default(false),\n});\n\n// Create a store\nconst todoStore = store({\n  id: "1",\n  title: "Learn jods",\n  completed: false,\n});\n\n// Validate data when needed\nfunction validateTodo() {\n  const todoData = todoStore.json();\n  return TodoSchema.parse(todoData);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-using-jjod-aliases-curated-subset",children:"2. Using j/jod Aliases (Curated Subset)"}),"\n",(0,t.jsxs)(n.p,{children:["jods provides ",(0,t.jsx)(n.code,{children:"j"})," and ",(0,t.jsx)(n.code,{children:"jod"})," exports that are aliases for a ",(0,t.jsx)(n.strong,{children:"curated subset"})," of Zod's ",(0,t.jsx)(n.code,{children:"z"})," API. This is a playful feature that makes the jods name make more sense (j/jod is to jods as z is to zod). These aliases provide convenient access to the most commonly used Zod functionalities directly through jods."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { store } from "jods";\n// Updated: Import j/jod from jods/zod\nimport { j } from "jods/zod";\n// OR\nimport { jod } from "jods/zod";\nimport { z } from "zod"; // You still need to install and import Zod!\n\n// Define schema using j (accesses a subset of Zod\'s z API)\nconst TodoSchema = j.object({\n  id: j.string(),\n  title: j.string().min(3), // .min() is an example of an exposed method\n  completed: j.boolean().default(false),\n});\n\n// OR using jod\nconst TodoSchemaJod = jod.object({\n  id: jod.string(),\n  title: jod.string().min(3),\n  completed: jod.boolean().default(false),\n});\n\n// The rest of your code remains the same\nconst todoStore = store({\n  id: "1",\n  title: "Learn jods",\n  completed: false,\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"j"})," and ",(0,t.jsx)(n.code,{children:"jod"})," exports are proxies that forward to Zod's ",(0,t.jsx)(n.code,{children:"z"})," when Zod is installed and the accessed method/property is part of the exposed set."]}),"\n",(0,t.jsxs)(n.li,{children:["You ",(0,t.jsx)(n.strong,{children:"must still install Zod separately"})," as a dependency (",(0,t.jsx)(n.code,{children:"pnpm install zod"}),")."]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.strong,{children:["For advanced or less common Zod features not exposed by ",(0,t.jsx)(n.code,{children:"j"}),"/",(0,t.jsx)(n.code,{children:"jod"}),", you should import and use ",(0,t.jsx)(n.code,{children:"z"})," directly from Zod."]})}),"\n",(0,t.jsxs)(n.li,{children:["If you attempt to access a Zod method or property via ",(0,t.jsx)(n.code,{children:"j"})," or ",(0,t.jsx)(n.code,{children:"jod"})," that is not part of the curated set, jods will throw an error. This error message will list all available properties/methods through the alias and guide you to use Zod directly for the requested functionality."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This approach helps keep the jods wrapper lightweight and focused, reducing maintenance an encouraging direct use of Zod for its full power when needed."}),"\n",(0,t.jsx)(n.h2,{id:"with-remix-integration",children:"With Remix Integration"}),"\n",(0,t.jsxs)(n.p,{children:["jods' Remix integration works seamlessly with Zod schemas. You can use Zod directly or the ",(0,t.jsx)(n.code,{children:"j"}),"/",(0,t.jsx)(n.code,{children:"jod"})," aliases (keeping in mind the curated API) when defining schemas for ",(0,t.jsx)(n.code,{children:"defineStore"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { defineStore } from "jods/remix";\nimport { z } from "zod";\n// Or use the aliases (updated import path)\nimport { j, jod } from "jods/zod";\n\n// Define schema with Zod\nconst todoSchema = z.object({\n  id: z.string(),\n  title: z.string().min(3),\n  completed: z.boolean().default(false),\n});\n\n// Create a store with schema validation\nconst todoStore = defineStore({\n  name: "todos",\n  schema: todoSchema, // Use Zod schema for validation\n  defaults: {\n    id: "",\n    title: "",\n    completed: false,\n  },\n  handlers: {\n    create: ({ form }) => {\n      // Return data will be validated against the schema\n      return {\n        id: crypto.randomUUID(),\n        title: form.get("title"),\n        completed: false,\n      };\n    },\n  },\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"j"})," and ",(0,t.jsx)(n.code,{children:"jod"})," exports in jods are designed to offer convenient, albeit limited, access to Zod's API:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"They look for Zod in your environment."}),"\n",(0,t.jsxs)(n.li,{children:["If Zod is available and you access an ",(0,t.jsx)(n.strong,{children:"exposed"})," method or property (e.g., ",(0,t.jsx)(n.code,{children:"j.string()"}),", ",(0,t.jsx)(n.code,{children:"j.object()"}),", ",(0,t.jsx)(n.code,{children:"j.optional()"}),"), they forward the call to Zod's ",(0,t.jsx)(n.code,{children:"z"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If Zod is available but you attempt to access a method or property ",(0,t.jsx)(n.strong,{children:"not exposed"})," through the ",(0,t.jsx)(n.code,{children:"j"}),"/",(0,t.jsx)(n.code,{children:"jod"})," alias, an error is thrown. The error message will list the available functionalities and recommend using Zod directly."]}),"\n",(0,t.jsxs)(n.li,{children:["If Zod is ",(0,t.jsx)(n.strong,{children:"not available"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Accessing an ",(0,t.jsx)(n.strong,{children:"exposed"})," method will result in a console warning and a chainable fallback object (where further allowed chained calls also use this fallback behavior)."]}),"\n",(0,t.jsxs)(n.li,{children:["Attempting to access a method or property ",(0,t.jsx)(n.strong,{children:"not exposed"})," will throw an error immediately."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This implementation ensures that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You get easy access to common Zod features through ",(0,t.jsx)(n.code,{children:"j"}),"/",(0,t.jsx)(n.code,{children:"jod"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"You get clear error messages if Zod is missing or if you try to use a non-exposed feature via the alias."}),"\n",(0,t.jsxs)(n.li,{children:["You are guided to use Zod directly (",(0,t.jsx)(n.code,{children:"import { z } from 'zod';"}),") for the full range of Zod's capabilities and for any features not part of the curated ",(0,t.jsx)(n.code,{children:"j"}),"/",(0,t.jsx)(n.code,{children:"jod"})," API."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"type-inference",children:"Type Inference"}),"\n",(0,t.jsxs)(n.p,{children:["Zod's powerful type inference works with the ",(0,t.jsx)(n.code,{children:"j"})," and ",(0,t.jsx)(n.code,{children:"jod"})," aliases as well, provided you are using exposed methods and properties. Since ",(0,t.jsx)(n.code,{children:"j"})," and ",(0,t.jsx)(n.code,{children:"jod"})," proxy to actual Zod objects (when Zod is present), and critically expose the ",(0,t.jsx)(n.code,{children:"_def"})," property, type inference with ",(0,t.jsx)(n.code,{children:"z.infer"})," should work as expected for schemas constructed with ",(0,t.jsx)(n.code,{children:"j"})," or ",(0,t.jsx)(n.code,{children:"jod"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { j } from "jods";\n\nconst UserSchema = j.object({\n  id: j.string(),\n  name: j.string(),\n  email: j.string().email(),\n  role: j.enum(["user", "admin"]),\n});\n\n// Infer the type from the schema\ntype User = z.infer<typeof UserSchema>;\n// Equivalent to:\n// type User = {\n//   id: string;\n//   name: string;\n//   email: string;\n//   role: \'user\' | \'admin\';\n// };\n'})}),"\n",(0,t.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"j"})," and ",(0,t.jsx)(n.code,{children:"jod"})," provide access to a ",(0,t.jsx)(n.strong,{children:"curated subset"})," of Zod's ",(0,t.jsx)(n.code,{children:"z"})," API."]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.strong,{children:["For full Zod functionality, always use the main ",(0,t.jsx)(n.code,{children:"z"})," export from Zod directly."]})}),"\n",(0,t.jsxs)(n.li,{children:["You must install Zod as a dependency: ",(0,t.jsx)(n.code,{children:"npm install zod"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If Zod is not installed, ",(0,t.jsx)(n.code,{children:"j"}),"/",(0,t.jsx)(n.code,{children:"jod"})," will issue warnings for allowed methods and return fallback objects; errors will be thrown for non-allowed methods."]}),"\n",(0,t.jsxs)(n.li,{children:["If Zod is installed, attempting to use a non-exposed Zod feature via ",(0,t.jsx)(n.code,{children:"j"}),"/",(0,t.jsx)(n.code,{children:"jod"})," will result in an error guiding you to use ",(0,t.jsx)(n.code,{children:"z"})," directly. The error message will list the exposed API."]}),"\n",(0,t.jsx)(n.li,{children:"This feature is primarily a playful homage to Zod's naming convention, providing a convenient but intentionally limited wrapper."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},3774:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>r});var s=o(6672);const t={},d=s.createContext(t);function i(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);
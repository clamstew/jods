"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1966],{3774:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var i=s(6672);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},9215:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"remix/index","title":"Remix Integration Overview","description":"Complete guide to using jods with Remix","source":"@site/docs/remix/index.md","sourceDirName":"remix","slug":"/remix/","permalink":"/jods/es/remix/","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/remix/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Remix Integration Overview","description":"Complete guide to using jods with Remix"},"sidebar":"jodsSidebar","previous":{"title":"\ud83d\udd0c Framework Integrations","permalink":"/jods/es/guides/framework-integrations"},"next":{"title":"\ud83e\ude9d useJods - Unified Hook","permalink":"/jods/es/remix/useJods"}}');var t=s(3420),r=s(3774);const o={sidebar_position:1,title:"Remix Integration Overview",description:"Complete guide to using jods with Remix"},d="\ud83d\udcbf \ud83d\udc3f\ufe0f \ud83e\udd86 Remix Integration Guide",a={},l=[{value:"\ud83c\udf1f Overview",id:"-overview",level:2},{value:"\ud83d\ude80 Getting Started",id:"-getting-started",level:2},{value:"\ud83d\udce6 Installation",id:"-installation",level:3},{value:"\ud83d\udd0c Basic Setup",id:"-basic-setup",level:3},{value:"\ud83d\udcad Core Concepts",id:"-core-concepts",level:2},{value:"\ud83d\udce6 Defining Stores",id:"-defining-stores",level:3},{value:"\ud83d\udee3\ufe0f Using in Routes",id:"\ufe0f-using-in-routes",level:3},{value:"\ud83d\udd04 Direct Mutations - The jods Way",id:"-direct-mutations---the-jods-way",level:2},{value:"\ud83d\udd27 Advanced Usage",id:"-advanced-usage",level:2},{value:"\u26a1 Optimistic UI",id:"-optimistic-ui",level:3},{value:"\ud83d\udcca Tracking Submission State",id:"-tracking-submission-state",level:3},{value:"\ud83d\udd04 Form Transition States",id:"-form-transition-states",level:3},{value:"\ud83d\udc74 Individual Hooks (Legacy Approach)",id:"-individual-hooks-legacy-approach",level:3},{value:"\u2728 Key Features",id:"-key-features",level:2},{value:"\ud83d\udd10 Privacy Considerations",id:"-privacy-considerations",level:2},{value:"Handling Sensitive Data",id:"handling-sensitive-data",level:3},{value:"\ud83d\udcda API Reference",id:"-api-reference",level:2},{value:"\ud83d\udd0c <code>useJods</code>",id:"-usejods",level:3},{value:"\ud83d\udce6 <code>defineStore</code>",id:"-definestore",level:3},{value:"\ud83d\udd17 <code>withJods</code>",id:"-withjods",level:3},{value:"\ud83d\udca7 <code>rehydrateClient</code>",id:"-rehydrateclient",level:3},{value:"\ud83c\udfea <code>useJodsStore</code>",id:"-usejodsstore",level:3},{value:"\ud83d\udccb <code>useJodsForm</code>",id:"-usejodsform",level:3},{value:"\ud83d\udd0d <code>useJodsFetchers</code>",id:"-usejodsfetchers",level:3},{value:"\ud83d\udea6 <code>useJodsTransition</code>",id:"-usejodstransition",level:3},{value:"\ud83d\ude80 <code>useOptimisticUpdate</code>",id:"-useoptimisticupdate",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-\ufe0f--remix-integration-guide",children:"\ud83d\udcbf \ud83d\udc3f\ufe0f \ud83e\udd86 Remix Integration Guide"})}),"\n",(0,t.jsx)(n.h2,{id:"-overview",children:"\ud83c\udf1f Overview"}),"\n",(0,t.jsx)(n.p,{children:"The jods Remix \ud83d\udcbf integration provides a seamless way to manage your application state across server and client, replacing traditional loaders and actions with reactive stores."}),"\n",(0,t.jsx)(n.h2,{id:"-getting-started",children:"\ud83d\ude80 Getting Started"}),"\n",(0,t.jsx)(n.h3,{id:"-installation",children:"\ud83d\udce6 Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm install jods zod\n"})}),"\n",(0,t.jsx)(n.h3,{id:"-basic-setup",children:"\ud83d\udd0c Basic Setup"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Create a jods directory in your app root"}),"\n",(0,t.jsxs)(n.li,{children:["Define your stores using ",(0,t.jsx)(n.code,{children:"defineStore"})]}),"\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.code,{children:"useJods"})," hook in your components"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-core-concepts",children:"\ud83d\udcad Core Concepts"}),"\n",(0,t.jsx)(n.h3,{id:"-defining-stores",children:"\ud83d\udce6 Defining Stores"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// app/jods/user.jods.ts\nimport { defineStore } from "jods/remix";\nimport { j } from "jods/zod";\n\nexport const user = defineStore({\n  name: "user",\n  schema: j.object({\n    name: j.string(),\n    email: j.string().email(),\n    preferences: j.object({\n      theme: j.enum(["light", "dark", "system"]).default("system"),\n    }),\n  }),\n  defaults: {\n    name: "",\n    email: "",\n    preferences: { theme: "system" },\n  },\n  handlers: {\n    async updateProfile({ current, form }) {\n      return {\n        ...current,\n        name: form.get("name"),\n        email: form.get("email"),\n      };\n    },\n  },\n  loader: async ({ request }) => {\n    // Load user data from database\n    return {\n      name: "Burt Macklin",\n      email: "burt.macklin@fbi.pawnee.city",\n      preferences: { theme: "light" },\n    };\n  },\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\ufe0f-using-in-routes",children:"\ud83d\udee3\ufe0f Using in Routes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// app/routes/profile.tsx\nimport { useJods } from "jods/remix";\nimport { user } from "~/jods/user.jods";\n\nexport default function Profile() {\n  const { stores, actions } = useJods(user, ["updateProfile"]);\n\n  return (\n    <div>\n      <h1>Profile</h1>\n      <actions.updateProfile.Form>\n        <div>\n          <label htmlFor="name">Name</label>\n          <input id="name" name="name" defaultValue={stores.name} />\n        </div>\n        <div>\n          <label htmlFor="email">Email</label>\n          <input id="email" name="email" defaultValue={stores.email} />\n        </div>\n        <button type="submit">Update Profile</button>\n      </actions.updateProfile.Form>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-direct-mutations---the-jods-way",children:"\ud83d\udd04 Direct Mutations - The jods Way"}),"\n",(0,t.jsx)(n.p,{children:"One of the most powerful features of jods is the ability to directly mutate your store properties:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { useJods } from "jods/remix";\nimport { user } from "~/jods/user.jods";\n\nfunction ThemeToggle() {\n  const { stores } = useJods(user);\n\n  return (\n    <button\n      onClick={() => {\n        // Direct property mutation! \ud83e\ude84\n        stores.preferences.theme =\n          stores.preferences.theme === "dark" ? "light" : "dark";\n      }}\n    >\n      Switch to {stores.preferences.theme === "dark" ? "Light" : "Dark"} mode\n    </button>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-advanced-usage",children:"\ud83d\udd27 Advanced Usage"}),"\n",(0,t.jsx)(n.h3,{id:"-optimistic-ui",children:"\u26a1 Optimistic UI"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { useOptimisticUpdate, useJods } from "jods/remix";\nimport { cart } from "~/jods/cart.jods";\n\nexport function AddToCartButton({ productId, productName }) {\n  const optimisticCart = useOptimisticUpdate(\n    cart,\n    "addItem",\n    (currentCart) => ({\n      items: [\n        ...currentCart.items,\n        { id: productId, name: productName, quantity: 1 },\n      ],\n    })\n  );\n\n  const { actions } = useJods(cart, ["addItem"]);\n\n  return (\n    <>\n      <div className="cart-preview">\n        {optimisticCart.items.length} items in cart\n      </div>\n      <actions.addItem.Form>\n        <input type="hidden" name="productId" value={productId} />\n        <button type="submit">Add to Cart</button>\n      </actions.addItem.Form>\n    </>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"-tracking-submission-state",children:"\ud83d\udcca Tracking Submission State"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { useJodsFetchers } from "jods/remix";\n\nfunction SubmitButton() {\n  const { isSubmitting } = useJodsFetchers("cart.addItem");\n\n  return (\n    <button type="submit" disabled={isSubmitting}>\n      {isSubmitting ? "Adding..." : "Add to Cart"}\n    </button>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"-form-transition-states",children:"\ud83d\udd04 Form Transition States"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { useJodsTransition } from "jods/remix";\n\nfunction FormStatus() {\n  const { isPending } = useJodsTransition("user.updateProfile");\n\n  if (isPending) {\n    return <div className="status">Saving changes...</div>;\n  }\n\n  return null;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"-individual-hooks-legacy-approach",children:"\ud83d\udc74 Individual Hooks (Legacy Approach)"}),"\n",(0,t.jsxs)(n.p,{children:["While ",(0,t.jsx)(n.code,{children:"useJods"})," is the recommended way to access jods data and actions, you can still use the individual hooks for specialized cases:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// Legacy approach with separate hooks\nimport { useJodsStore, useJodsForm } from "jods/remix";\nimport { user } from "~/jods/user.jods";\n\nexport default function ProfileLegacy() {\n  const userData = useJodsStore(user);\n  const form = useJodsForm(user, "updateProfile");\n\n  return (\n    <div>\n      <h1>Profile</h1>\n      <form.Form>\n        <div>\n          <label htmlFor="name">Name</label>\n          <input id="name" name="name" defaultValue={userData.name} />\n        </div>\n        <div>\n          <label htmlFor="email">Email</label>\n          <input id="email" name="email" defaultValue={userData.email} />\n        </div>\n        <button type="submit">Update Profile</button>\n      </form.Form>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-key-features",children:"\u2728 Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udd04 Server-Client Synchronization"}),": State is automatically hydrated from server to client"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udcdd Form Handling"}),": Built-in form utilities with validation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udee1\ufe0f Type Safety"}),": Full TypeScript and schema support with ",(0,t.jsx)(n.code,{children:"j"}),"/",(0,t.jsx)(n.code,{children:"jod"})," aliases"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u26a1 Optimistic Updates"}),": Manage pending state with useJodsFetchers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u270f\ufe0f Direct Mutations"}),": Update your state naturally with direct property assignments"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-privacy-considerations",children:"\ud83d\udd10 Privacy Considerations"}),"\n",(0,t.jsx)(n.p,{children:"When using jods with Remix, it's important to understand how data flows between server and client:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// app/jods/user.jods.ts\nimport { defineStore } from "jods/remix";\nimport { j } from "jods/zod";\n\nexport const user = defineStore({\n  name: "user",\n  schema: j.object({\n    name: j.string(),\n    email: j.string().email(),\n    // Sensitive data that shouldn\'t be exposed to client\n    role: j.string(),\n    securityKey: j.string().optional(),\n  }),\n  // ...\n});\n'})}),"\n",(0,t.jsx)(n.admonition,{title:"Security Warning",type:"danger",children:(0,t.jsx)(n.p,{children:"By default, all store data loaded on the server is hydrated to the client. This means any sensitive data in your store will be available in client-side JavaScript."})}),"\n",(0,t.jsx)(n.h3,{id:"handling-sensitive-data",children:"Handling Sensitive Data"}),"\n",(0,t.jsx)(n.p,{children:"To protect sensitive information:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Server-only properties"}),": Consider using a separate store for server-only data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data filtering"}),": Filter sensitive data before returning it from loaders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use jods persist"})," (coming in future release, see issue #57): Will allow specifying which properties should be persisted to client"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Example: Filtering sensitive data in loader\nloader: async ({ request }) => {\n  const userData = await getUserData();\n\n  // Don't send sensitive fields to client\n  const { securityKey, internalNotes, ...safeUserData } = userData;\n\n  return safeUserData;\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-api-reference",children:"\ud83d\udcda API Reference"}),"\n",(0,t.jsxs)(n.h3,{id:"-usejods",children:["\ud83d\udd0c ",(0,t.jsx)(n.code,{children:"useJods"})]}),"\n",(0,t.jsxs)(n.p,{children:["The recommended unified hook for accessing both store data and actions. ",(0,t.jsx)(n.a,{href:"/jods/remix/useJods",children:"Read more"})]}),"\n",(0,t.jsxs)(n.h3,{id:"-definestore",children:["\ud83d\udce6 ",(0,t.jsx)(n.code,{children:"defineStore"})]}),"\n",(0,t.jsxs)(n.p,{children:["Creates a jods store with server-side handlers and loaders. ",(0,t.jsx)(n.a,{href:"/jods/remix/api-reference#definestoreoptions",children:"Read more"})]}),"\n",(0,t.jsxs)(n.h3,{id:"-withjods",children:["\ud83d\udd17 ",(0,t.jsx)(n.code,{children:"withJods"})]}),"\n",(0,t.jsxs)(n.p,{children:["Higher-order function to integrate jods with Remix \ud83d\udcbf loaders and actions. ",(0,t.jsx)(n.a,{href:"/jods/remix/api-reference#withjodsstores-loaderfn",children:"Read more"})]}),"\n",(0,t.jsxs)(n.h3,{id:"-rehydrateclient",children:["\ud83d\udca7 ",(0,t.jsx)(n.code,{children:"rehydrateClient"})]}),"\n",(0,t.jsxs)(n.p,{children:["Component to rehydrate jods stores on the client from server state. ",(0,t.jsx)(n.a,{href:"/jods/remix/api-reference#rehydrateclientoptions",children:"Read more"})]}),"\n",(0,t.jsxs)(n.h3,{id:"-usejodsstore",children:["\ud83c\udfea ",(0,t.jsx)(n.code,{children:"useJodsStore"})]}),"\n",(0,t.jsxs)(n.p,{children:["React hook to access the current state of a jods store. ",(0,t.jsx)(n.a,{href:"/jods/remix/api-reference#usejodsstorestore",children:"Read more"})]}),"\n",(0,t.jsxs)(n.h3,{id:"-usejodsform",children:["\ud83d\udccb ",(0,t.jsx)(n.code,{children:"useJodsForm"})]}),"\n",(0,t.jsxs)(n.p,{children:["React hook to create form bindings for a jods store action. ",(0,t.jsx)(n.a,{href:"/jods/remix/api-reference#usejodsformactionhandler",children:"Read more"})]}),"\n",(0,t.jsxs)(n.h3,{id:"-usejodsfetchers",children:["\ud83d\udd0d ",(0,t.jsx)(n.code,{children:"useJodsFetchers"})]}),"\n",(0,t.jsxs)(n.p,{children:["React hook to track the state of all fetchers for a specific jods store action. ",(0,t.jsx)(n.a,{href:"/jods/remix/api-reference#usejodsfetchersactionid",children:"Read more"})]}),"\n",(0,t.jsxs)(n.h3,{id:"-usejodstransition",children:["\ud83d\udea6 ",(0,t.jsx)(n.code,{children:"useJodsTransition"})]}),"\n",(0,t.jsxs)(n.p,{children:["React hook to track transition state for jods action submissions. ",(0,t.jsx)(n.a,{href:"/jods/remix/api-reference#usejodstransitionactionid",children:"Read more"})]}),"\n",(0,t.jsxs)(n.h3,{id:"-useoptimisticupdate",children:["\ud83d\ude80 ",(0,t.jsx)(n.code,{children:"useOptimisticUpdate"})]}),"\n",(0,t.jsxs)(n.p,{children:["React hook for implementing optimistic UI updates with jods stores. ",(0,t.jsx)(n.a,{href:"/jods/remix/api-reference#useoptimisticupdatestore-actionname-optimisticdatafn",children:"Read more"})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);
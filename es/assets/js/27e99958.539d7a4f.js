"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6665],{3774:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6672);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},6849:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"state-persistence","title":"\ud83d\udcbe State Persistence","description":"jods includes built-in persistence capabilities, allowing state to be saved and restored across page reloads, browser sessions, or even different devices.","source":"@site/docs/state-persistence.md","sourceDirName":".","slug":"/state-persistence","permalink":"/es/state-persistence","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/state-persistence.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"jodsSidebar","previous":{"title":"\ud83d\udd70\ufe0f Time-Travel Debugging (Old)","permalink":"/es/time-travel-debugging-old"},"next":{"title":"\ud83d\uddc4\ufe0f Storage Adapters","permalink":"/es/storage-adapters"}}');var r=s(3420),i=s(3774);const a={sidebar_position:6},o="\ud83d\udcbe State Persistence",l={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Storage Adapters",id:"storage-adapters",level:2},{value:"Built-in Browser Storage",id:"built-in-browser-storage",level:3},{value:"Custom Storage Adapters",id:"custom-storage-adapters",level:3},{value:"Async Storage",id:"async-storage",level:3},{value:"API or Server-side Storage",id:"api-or-server-side-storage",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Key Option",id:"key-option",level:3},{value:"Selective Persistence",id:"selective-persistence",level:3},{value:"Include Only Specific Properties",id:"include-only-specific-properties",level:4},{value:"Exclude Sensitive Data",id:"exclude-sensitive-data",level:4},{value:"Dynamic Property Selection",id:"dynamic-property-selection",level:4},{value:"Versioning and Migrations",id:"versioning-and-migrations",level:3},{value:"Performance Tuning",id:"performance-tuning",level:3},{value:"Load-Only Mode",id:"load-only-mode",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Multiple Stores",id:"multiple-stores",level:2},{value:"Helper Functions",id:"helper-functions",level:2},{value:"Getting Persisted Data",id:"getting-persisted-data",level:3},{value:"Clearing Persisted Data",id:"clearing-persisted-data",level:3},{value:"Checking Persistence Status",id:"checking-persistence-status",level:3},{value:"Framework Integration",id:"framework-integration",level:2},{value:"React",id:"react",level:3},{value:"Preact",id:"preact",level:3},{value:"Server-Side Rendering (SSR)",id:"server-side-rendering-ssr",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Sensitive Data",id:"sensitive-data",level:3},{value:"Data Validation",id:"data-validation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"User Preferences",id:"user-preferences",level:3},{value:"Form State",id:"form-state",level:3},{value:"Shopping Cart",id:"shopping-cart",level:3},{value:"Multi-App State",id:"multi-app-state",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-state-persistence",children:"\ud83d\udcbe State Persistence"})}),"\n",(0,r.jsx)(n.p,{children:"jods includes built-in persistence capabilities, allowing state to be saved and restored across page reloads, browser sessions, or even different devices."}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"persist"})," function connects a jods store to a storage backend:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { store, persist } from "jods";\n\n// Create a store\nconst counter = store({ count: 0 });\n\n// Persist to localStorage\nconst cleanup = persist(localStorage, counter, {\n  key: "counter-app", // Storage key\n});\n\n// Update the store - changes automatically persist\ncounter.count = 5;\n\n// To stop persistence\ncleanup();\n'})}),"\n",(0,r.jsx)(n.p,{children:"This simple example:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Creates a store for a counter"}),"\n",(0,r.jsx)(n.li,{children:'Persists it to localStorage under the key "counter-app"'}),"\n",(0,r.jsx)(n.li,{children:"Automatically saves and reloads the state"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"storage-adapters",children:"Storage Adapters"}),"\n",(0,r.jsx)(n.p,{children:"jods works with any storage mechanism that implements the standard storage interface:"}),"\n",(0,r.jsx)(n.h3,{id:"built-in-browser-storage",children:"Built-in Browser Storage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Local storage (persists until cleared)\npersist(localStorage, myStore);\n\n// Session storage (persists until tab is closed)\npersist(sessionStorage, myStore);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-storage-adapters",children:"Custom Storage Adapters"}),"\n",(0,r.jsx)(n.p,{children:"You can create custom adapters for any storage system:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Synchronous custom storage (like localStorage)\nconst customStorage = {\n  getItem: (key) => {\n    return window.customDB.get(key);\n  },\n  setItem: (key, value) => {\n    window.customDB.set(key, value);\n  },\n  removeItem: (key) => {\n    window.customDB.delete(key);\n  },\n};\n\n// Use the custom storage\npersist(customStorage, myStore);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"async-storage",children:"Async Storage"}),"\n",(0,r.jsx)(n.p,{children:"jods automatically detects async storage methods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// IndexedDB adapter example\nconst indexedDBStorage = {\n  getItem: async (key) => {\n    return new Promise((resolve) => {\n      const request = indexedDB.open("myDatabase");\n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(["keyval"]);\n        const store = transaction.objectStore("keyval");\n        const getRequest = store.get(key);\n        getRequest.onsuccess = () => {\n          resolve(getRequest.result);\n        };\n      };\n    });\n  },\n  setItem: async (key, value) => {\n    return new Promise((resolve) => {\n      const request = indexedDB.open("myDatabase");\n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(["keyval"], "readwrite");\n        const store = transaction.objectStore("keyval");\n        store.put(value, key);\n        transaction.oncomplete = () => resolve();\n      };\n    });\n  },\n  removeItem: async (key) => {\n    // Similar implementation to delete the item\n  },\n};\n\n// Use async storage\npersist(indexedDBStorage, myStore);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"api-or-server-side-storage",children:"API or Server-side Storage"}),"\n",(0,r.jsx)(n.p,{children:"For remote persistence:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const apiStorage = {\n  getItem: async (key) => {\n    const response = await fetch(`/api/state/${key}`);\n    if (!response.ok) return null;\n    return response.text();\n  },\n  setItem: async (key, value) => {\n    await fetch(`/api/state/${key}`, {\n      method: "POST",\n      body: value,\n      headers: {\n        "Content-Type": "application/json",\n      },\n    });\n  },\n  removeItem: async (key) => {\n    await fetch(`/api/state/${key}`, {\n      method: "DELETE",\n    });\n  },\n};\n\n// Use the API storage\npersist(apiStorage, myStore);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,r.jsx)(n.p,{children:"The persist function accepts several options for fine-tuning behavior:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'persist(localStorage, myStore, {\n  // Required options\n  key: "my-app-state", // Storage key (default: "jods-state")\n\n  // Selective persistence\n  partial: ["theme", "fontSize"], // Only persist these properties\n  exclude: ["authToken", "tempData"], // Don\'t persist these properties\n\n  // Advanced options\n  version: 2, // Schema version for migrations\n  migrate: (oldState, oldVersion) => {\n    // Convert from version 1 to version 2\n    if (oldVersion === 1) {\n      return {\n        ...oldState,\n        theme: oldState.theme || "system", // Add default\n        fontSize: oldState.textSize, // Rename property\n      };\n    }\n    return oldState;\n  },\n\n  // Performance options\n  syncDebounce: 200, // Debounce writes (ms)\n\n  // Mode options\n  loadOnly: false, // Only load, don\'t save changes\n\n  // Error handling\n  onError: (error, operation) => {\n    console.error(`Persistence error during ${operation}:`, error);\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"key-option",children:"Key Option"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"key"})," option defines where data is stored:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// Store different app sections separately\npersist(localStorage, userSettings, { key: "user-settings" });\npersist(localStorage, appState, { key: "app-state" });\n'})}),"\n",(0,r.jsx)(n.h3,{id:"selective-persistence",children:"Selective Persistence"}),"\n",(0,r.jsx)(n.h4,{id:"include-only-specific-properties",children:"Include Only Specific Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'persist(localStorage, userStore, {\n  key: "user-data",\n  partial: ["name", "preferences", "theme"],\n});\n'})}),"\n",(0,r.jsx)(n.h4,{id:"exclude-sensitive-data",children:"Exclude Sensitive Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'persist(localStorage, userStore, {\n  key: "user-data",\n  exclude: ["authToken", "password", "sessionId"],\n});\n'})}),"\n",(0,r.jsx)(n.h4,{id:"dynamic-property-selection",children:"Dynamic Property Selection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'persist(localStorage, stateStore, {\n  key: "app-state",\n  partial: (key, value) => {\n    // Only persist properties that:\n    // - Don\'t start with underscore (private)\n    // - Aren\'t functions\n    // - Aren\'t sensitive data\n    return (\n      !key.startsWith("_") &&\n      typeof value !== "function" &&\n      !["password", "token"].includes(key)\n    );\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"versioning-and-migrations",children:"Versioning and Migrations"}),"\n",(0,r.jsx)(n.p,{children:"When your state schema changes, use versioning to migrate old data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'persist(localStorage, appStore, {\n  key: "app-state",\n  version: 3, // Current schema version\n  migrate: (oldState, oldVersion) => {\n    // Handle migrations for each version\n    if (oldVersion === 1) {\n      // Version 1 to 2 migration\n      oldState = {\n        ...oldState,\n        theme: oldState.theme || "light", // Add missing field\n        preferences: { fontSize: oldState.fontSize }, // Restructure\n      };\n      // Continue to next version\n      oldVersion = 2;\n    }\n\n    if (oldVersion === 2) {\n      // Version 2 to 3 migration\n      oldState = {\n        ...oldState,\n        preferences: {\n          ...oldState.preferences,\n          colorScheme: oldState.theme, // Move property\n        },\n      };\n      delete oldState.theme; // Remove old property\n    }\n\n    return oldState;\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"performance-tuning",children:"Performance Tuning"}),"\n",(0,r.jsx)(n.p,{children:"Control how frequently state is persisted:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"persist(localStorage, myStore, {\n  // Write at most once every 500ms\n  syncDebounce: 500,\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"load-only-mode",children:"Load-Only Mode"}),"\n",(0,r.jsx)(n.p,{children:"Sometimes you only want to load state without persisting changes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Load initial state but don't persist changes\npersist(localStorage, initialState, {\n  loadOnly: true,\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"This is useful for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"One-time imports of configuration"}),"\n",(0,r.jsx)(n.li,{children:"Loading defaults that might be modified without saving"}),"\n",(0,r.jsx)(n.li,{children:"Testing with persistent data"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"Handle storage errors gracefully:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'persist(localStorage, myStore, {\n  onError: (error, operation) => {\n    if (operation === "load") {\n      // Handle load errors (corrupt data, migration failures)\n      console.error("Failed to load persisted state:", error);\n      // Maybe show a notification to the user\n      notifyUser("Could not restore your previous settings");\n    } else if (operation === "save") {\n      // Handle save errors (quota exceeded, permission denied)\n      console.error("Failed to save state:", error);\n      // Maybe show a notification\n      notifyUser("Could not save your settings (storage full?)");\n    }\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"multiple-stores",children:"Multiple Stores"}),"\n",(0,r.jsx)(n.p,{children:"You can persist multiple stores under a single storage key:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const userProfile = store({\n  name: "User",\n  avatar: "default.png",\n});\n\nconst appSettings = store({\n  theme: "dark",\n  fontSize: 16,\n});\n\n// Persist both stores under one key\npersist(localStorage, [userProfile, appSettings], {\n  key: "app-data",\n});\n\n// Changes to either store will be persisted\nuserProfile.name = "New User";\nappSettings.theme = "light";\n'})}),"\n",(0,r.jsx)(n.p,{children:"This is useful for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Grouping related stores"}),"\n",(0,r.jsx)(n.li,{children:"Ensuring atomic updates across stores"}),"\n",(0,r.jsx)(n.li,{children:"Simplifying storage key management"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"helper-functions",children:"Helper Functions"}),"\n",(0,r.jsx)(n.p,{children:"jods provides additional utility functions for working with persisted state."}),"\n",(0,r.jsx)(n.h3,{id:"getting-persisted-data",children:"Getting Persisted Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { getPersisted } from "jods";\n\n// Get persisted data without affecting any store\nconst savedState = getPersisted(localStorage, "app-state");\nconsole.log("Saved state:", savedState);\n\n// With options (like migrations)\nconst migratedState = getPersisted(localStorage, "app-state", {\n  version: 2,\n  migrate: (old, oldVersion) => {\n    // Migration logic\n    return transformed;\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"clearing-persisted-data",children:"Clearing Persisted Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { clearPersisted } from "jods";\n\n// Clear persisted data\nclearPersisted(localStorage, "app-state");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"checking-persistence-status",children:"Checking Persistence Status"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { isPersisted, isPersistAvailable } from "jods";\n\n// Check if a store is being persisted\nif (isPersisted(myStore)) {\n  console.log("Store is persisted");\n}\n\n// Check if persistence is available in this environment\nif (isPersistAvailable()) {\n  // Safe to use persistence\n  setupPersistence();\n} else {\n  // Fall back to non-persistent mode\n  setupNonPersistentMode();\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"framework-integration",children:"Framework Integration"}),"\n",(0,r.jsx)(n.h3,{id:"react",children:"React"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import { store } from "jods";\nimport { useJods, usePersist } from "jods/react";\n\n// Create a store\nconst settings = store({\n  theme: "light",\n  fontSize: 16,\n});\n\nfunction SettingsComponent() {\n  // Use the store\n  const state = useJods(settings);\n\n  // Persist with localStorage - only runs once when component mounts\n  usePersist(localStorage, settings, {\n    key: "user-settings",\n  });\n\n  return (\n    <div>\n      <select\n        value={state.theme}\n        onChange={(e) => (state.theme = e.target.value)}\n      >\n        <option value="light">Light</option>\n        <option value="dark">Dark</option>\n      </select>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"preact",children:"Preact"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import { store } from "jods";\nimport { useJods, usePersist } from "jods/preact";\n\n// Create a store\nconst settings = store({\n  theme: "light",\n  fontSize: 16,\n});\n\nfunction SettingsComponent() {\n  // Use the store\n  const state = useJods(settings);\n\n  // Persist with localStorage\n  usePersist(localStorage, settings, {\n    key: "user-settings",\n  });\n\n  return (\n    <div>\n      <select\n        value={state.theme}\n        onChange={(e) => (state.theme = e.target.value)}\n      >\n        <option value="light">Light</option>\n        <option value="dark">Dark</option>\n      </select>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"server-side-rendering-ssr",children:"Server-Side Rendering (SSR)"}),"\n",(0,r.jsx)(n.p,{children:"When using persistence with SSR frameworks like Next.js or Remix, follow these patterns:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import { useEffect } from "react";\nimport { store } from "jods";\nimport { useJods, usePersist } from "jods/react";\n\n// Create store outside component\nconst appStore = store({ count: 0 });\n\nexport default function Page({ initialData }) {\n  // First hydrate from SSR data\n  useEffect(() => {\n    if (initialData) {\n      Object.assign(appStore, initialData);\n    }\n  }, [initialData]);\n\n  // Then set up client-side persistence\n  usePersist(\n    // Only use localStorage in browser\n    typeof window !== "undefined" ? localStorage : null,\n    appStore,\n    { key: "app-data" }\n  );\n\n  return <div>{/* Your component */}</div>;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For Remix-specific persistence patterns, see the ",(0,r.jsx)(n.a,{href:"/remix-integration",children:"Remix Integration Guide"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"sensitive-data",children:"Sensitive Data"}),"\n",(0,r.jsx)(n.p,{children:"Never store sensitive data like authentication tokens in localStorage or sessionStorage:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// BAD: storing sensitive data in localStorage\npersist(localStorage, userStore);\n\n// GOOD: excluding sensitive data\npersist(localStorage, userStore, {\n  exclude: ["authToken", "password", "personalInfo"],\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"data-validation",children:"Data Validation"}),"\n",(0,r.jsx)(n.p,{children:"Always validate loaded data before using it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { z } from "zod";\n// Or use jods\' aliases\n// import { j, jod } from "jods";\n\n// Define a schema for your data\nconst SettingsSchema = z.object({\n  theme: z.enum(["light", "dark", "system"]),\n  fontSize: z.number().min(8).max(32),\n  notifications: z.boolean(),\n});\n\n// Use with persistence\npersist(localStorage, settingsStore, {\n  onError: (error, operation) => {\n    console.error(`Persistence error: ${error}`);\n  },\n  // Custom load transformation that validates data\n  transform: {\n    load: (data) => {\n      try {\n        // Validate data against schema\n        return SettingsSchema.parse(data);\n      } catch (error) {\n        // If validation fails, return default values\n        console.error("Invalid persisted data:", error);\n        return {\n          theme: "system",\n          fontSize: 16,\n          notifications: true,\n        };\n      }\n    },\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Selective Persistence"}),": Only persist what's needed using ",(0,r.jsx)(n.code,{children:"partial"})," or ",(0,r.jsx)(n.code,{children:"exclude"})," options."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Version Your State"}),": Always include a ",(0,r.jsx)(n.code,{children:"version"})," option for future-proofing your state schema."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Handle Errors"}),": Provide an ",(0,r.jsx)(n.code,{children:"onError"})," handler to gracefully handle storage failures."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Security First"}),": Exclude sensitive data from persistence, especially with localStorage."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Debouncing"}),": For frequently changing state, use ",(0,r.jsx)(n.code,{children:"syncDebounce"})," to prevent excessive writes."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Clean Up"}),": Always store and use the cleanup function to prevent memory leaks:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const cleanup = persist(localStorage, myStore);\n\n// Later when component unmounts or when no longer needed\ncleanup();\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"SSR Compatibility"}),": When using with SSR, always check for browser environment:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// Only use browser storage on the client\nconst storage = typeof window !== "undefined" ? localStorage : null;\npersist(storage, myStore);\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test Resilience"}),": Test your application with corrupt or missing persistence data to ensure it recovers gracefully."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,r.jsx)(n.h3,{id:"user-preferences",children:"User Preferences"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const preferences = store({\n  theme: "light",\n  fontSize: 16,\n  notifications: true,\n  lastVisitedPage: "/home",\n});\n\npersist(localStorage, preferences, {\n  key: "user-prefs",\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"form-state",children:"Form State"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const formState = store({\n  values: {\n    name: "",\n    email: "",\n    message: "",\n  },\n  dirty: false,\n  submitted: false,\n});\n\n// Save draft as user types\npersist(localStorage, formState, {\n  key: "contact-form-draft",\n  // Don\'t persist submission status\n  exclude: ["submitted", "errors"],\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"shopping-cart",children:"Shopping Cart"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const cart = store({\n  items: [],\n  total: 0,\n  currency: "USD",\n});\n\npersist(localStorage, cart, {\n  key: "shopping-cart",\n});\n\n// Add computed properties that don\'t get persisted\ncart.itemCount = computed(() => cart.items.length);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"multi-app-state",children:"Multi-App State"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const userProfile = store({\n  id: null,\n  name: "",\n  preferences: {},\n});\n\nconst orderHistory = store({\n  orders: [],\n  lastOrderDate: null,\n});\n\nconst uiState = store({\n  sidebarOpen: true,\n  activeTab: "profile",\n});\n\n// Group related stores under one key\npersist(localStorage, [userProfile, orderHistory], {\n  key: "user-data",\n});\n\n// Keep UI state separate\npersist(localStorage, uiState, {\n  key: "ui-state",\n});\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1743],{2100:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"remix/useJods","title":"useJods - The Unified Hook","description":"Combine store data access and form handlers in one elegant hook","source":"@site/docs/remix/useJods.md","sourceDirName":"remix","slug":"/remix/useJods","permalink":"/es/remix/useJods","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/remix/useJods.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"useJods - The Unified Hook","description":"Combine store data access and form handlers in one elegant hook"},"sidebar":"jodsSidebar","previous":{"title":"\ud83c\udf10 Overview","permalink":"/es/remix/"},"next":{"title":"\ud83d\udd04 Migration Guide","permalink":"/es/remix/migration-guide"}}');var s=o(3420),i=o(3774);const r={sidebar_position:2,title:"useJods - The Unified Hook",description:"Combine store data access and form handlers in one elegant hook"},a="useJods",d={},l=[{value:"\ud83e\udd2f Direct Mutation Magic: The jods Way!",id:"-direct-mutation-magic-the-jods-way",level:2},{value:"\ud83d\udc74 The Old Way: Multiple Hooks and More Code",id:"-the-old-way-multiple-hooks-and-more-code",level:2},{value:"\ud83d\udcda API Reference",id:"-api-reference",level:2},{value:"\ud83d\udd04 Basic Usage",id:"-basic-usage",level:3},{value:"\ud83d\udd0d Single Store Examples",id:"-single-store-examples",level:3},{value:"\ud83d\udd00 Multiple Stores",id:"-multiple-stores",level:3},{value:"\ud83d\udd0c Integration with Loaders",id:"-integration-with-loaders",level:2},{value:"\u26a1 Enhanced Store Functionality",id:"-enhanced-store-functionality",level:2},{value:"\ud83e\ude84 Direct Mutations",id:"-direct-mutations",level:3},{value:"\ud83c\udfaf Why Use This Approach?",id:"-why-use-this-approach",level:2},{value:"\ud83d\ude80 Full Example",id:"-full-example",level:2},{value:"\ud83e\udd14 Wait, Did We Just...?",id:"-wait-did-we-just",level:2}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"usejods",children:"useJods"})}),"\n",(0,s.jsx)(t.p,{children:"The unified way to access jods data and actions in Remix applications."}),"\n",(0,s.jsx)(t.h2,{id:"-direct-mutation-magic-the-jods-way",children:"\ud83e\udd2f Direct Mutation Magic: The jods Way!"}),"\n",(0,s.jsx)(t.p,{children:"When working with jods in Remix applications, you typically need two things:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Access to your reactive store data"}),"\n",(0,s.jsx)(t.li,{children:"Form handlers to update your data"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"useJods"})," hook provides a clean, unified API for both, with a powerful direct mutation model that will change how you think about state management:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'// Multiple stores with direct mutation\nimport { useJods } from "jods/remix";\n\nconst { stores, actions } = useJods([userStore, todoStore], {\n  user: ["updateProfile"],\n  todos: ["addTodo"],\n});\n\n// Access state from different stores\nconsole.log(stores.user.name);\nconsole.log(stores.todos.items);\n\n// Directly mutate properties (the jods way!)\nstores.user.name = "New Name"; // Not setState()\nstores.todos.items.push(newTodo); // Direct array mutation\nstores.todos.completed = !stores.todos.completed; // Toggle boolean\n'})}),"\n",(0,s.jsx)(t.p,{children:"This unified approach replaces multiple separate hooks with one elegant API:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'// Unified approach\nimport { useJods } from "jods/remix";\nimport todoStore from "todos.jods";\n\nfunction TodoPage() {\n  // Get both store data and actions in one hook call\n  const { stores, actions, loaderData } = useJods(todoStore, [\n    "addTodo",\n    "deleteTodo",\n  ]);\n\n  return (\n    <>\n      <h1>{loaderData.title}</h1>\n      <ul>\n        {stores.items.map((item) => (\n          <li key={item.id}>\n            {item.text}\n            <actions.deleteTodo.Form>\n              <input type="hidden" name="id" value={item.id} />\n              <button type="submit">Delete</button>\n            </actions.deleteTodo.Form>\n          </li>\n        ))}\n      </ul>\n\n      <actions.addTodo.Form>\n        <input name="text" />\n        <button type="submit">Add Todo</button>\n      </actions.addTodo.Form>\n    </>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"-the-old-way-multiple-hooks-and-more-code",children:"\ud83d\udc74 The Old Way: Multiple Hooks and More Code"}),"\n",(0,s.jsx)(t.p,{children:"This replaces the previous approach that required multiple separate hooks:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'// Previous approach\nimport { useJodsStore, useJodsForm } from "jods/remix";\n\nfunction TodoPage() {\n  // Access store data\n  const todoData = useJodsStore(todoStore);\n  // Get loader data separately\n  const loaderData = useLoaderData();\n\n  // Access form handlers separately\n  const addTodoForm = useJodsForm(todoStore, "addTodo");\n  const deleteTodoForm = useJodsForm(todoStore, "deleteTodo");\n\n  return (\n    <>\n      <h1>{loaderData.title}</h1>\n      <ul>\n        {todoData.items.map((item) => (\n          <li key={item.id}>\n            {item.text}\n            <deleteTodoForm.Form>\n              <input type="hidden" name="id" value={item.id} />\n              <button type="submit">Delete</button>\n            </deleteTodoForm.Form>\n          </li>\n        ))}\n      </ul>\n\n      <addTodoForm.Form>\n        <input name="text" />\n        <button type="submit">Add Todo</button>\n      </addTodoForm.Form>\n    </>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"-api-reference",children:"\ud83d\udcda API Reference"}),"\n",(0,s.jsx)(t.h3,{id:"-basic-usage",children:"\ud83d\udd04 Basic Usage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"const { stores, actions, loaderData } = useJods(store, handlers?);\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"store"}),": A jods store or array of stores"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"handlers"}),": Optional. A handler name, array of handler names, or a mapping of store names to handler names"]}),"\n",(0,s.jsxs)(t.li,{children:["Returns:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"stores"}),": Enhanced store object(s) with reactive state and original methods"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"actions"}),": Form handlers and other actions"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"loaderData"}),": Data from the route loader"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"-single-store-examples",children:"\ud83d\udd0d Single Store Examples"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"With a single handler:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'const { stores, actions } = useJods(todoStore, "addTodo");\n\n// Use stores.items to access store data\n// Use stores.setState to call original store methods\n// Use actions.addTodo.Form for the form\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"With multiple handlers:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'const { stores, actions } = useJods(todoStore, [\n  "addTodo",\n  "deleteTodo",\n  "toggleTodo",\n]);\n\n// Access all forms via actions.addTodo, actions.deleteTodo, etc.\n'})}),"\n",(0,s.jsx)(t.h3,{id:"-multiple-stores",children:"\ud83d\udd00 Multiple Stores"}),"\n",(0,s.jsx)(t.p,{children:"When working with multiple stores, you can specify handlers for each store:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'const { stores, actions } = useJods([userStore, todoStore], {\n  user: ["updateProfile", "changePassword"],\n  todos: ["addTodo", "deleteTodo"],\n});\n\n// Access data and methods via stores.user and stores.todos\n// Example: stores.user.name, stores.todos.items\n// Example: stores.user.setState({ name: "New Name" })\n// Access forms via actions.user.updateProfile.Form, actions.todos.addTodo.Form, etc.\n'})}),"\n",(0,s.jsx)(t.h2,{id:"-integration-with-loaders",children:"\ud83d\udd0c Integration with Loaders"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"useJods"})," hook automatically gives you access to loader data:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'// In your loader\nexport const loader = withJods([todoStore], async () => {\n  return { title: "Todo List" };\n});\n\n// In your component\nfunction TodoPage() {\n  const { stores, actions, loaderData } = useJods(todoStore, "addTodo");\n\n  return (\n    <>\n      <h1>{loaderData.title}</h1>\n      {/* Rest of the component */}\n    </>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"-enhanced-store-functionality",children:"\u26a1 Enhanced Store Functionality"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"stores"})," object returned by ",(0,s.jsx)(t.code,{children:"useJods"})," combines the reactive state with all the methods from the original store:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'const { stores } = useJods(todoStore);\n\n// Access reactive state\nconsole.log(stores.items);\n\n// Call original store methods\nstores.setState({ items: [...stores.items, newItem] });\n\n// Or use direct mutations\nstores.items.push(newItem); // Direct array mutation\nstores.theme = "dark"; // Direct property assignment\n'})}),"\n",(0,s.jsx)(t.p,{children:"This means you don't need to keep a reference to both the original store and its state - everything is available in one place."}),"\n",(0,s.jsx)(t.h3,{id:"-direct-mutations",children:"\ud83e\ude84 Direct Mutations"}),"\n",(0,s.jsx)(t.p,{children:"One of the most powerful features of jods is the ability to directly mutate your store properties:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'const { stores } = useJods([userStore, todoStore]);\n\n// Directly assign to primitive values\nstores.user.name = "New Name";\nstores.user.isAdmin = true;\n\n// Directly mutate arrays\nstores.todos.items.push({ id: "new", text: "New todo", completed: false });\nstores.todos.items.splice(2, 1); // Remove an item\n\n// Directly mutate nested objects\nstores.user.preferences.theme = "dark";\nstores.user.preferences.notifications = false;\n\n// Toggle boolean values\nstores.ui.sidebarOpen = !stores.ui.sidebarOpen;\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Unlike traditional React state management solutions that require immutable updates with ",(0,s.jsx)(t.code,{children:"setState"}),", jods automatically tracks these mutations and triggers re-renders as needed. This gives you a more natural programming model while maintaining all the benefits of reactivity."]}),"\n",(0,s.jsx)(t.h2,{id:"-why-use-this-approach",children:"\ud83c\udfaf Why Use This Approach?"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\ud83d\udcc9 ",(0,s.jsx)(t.strong,{children:"Less Boilerplate"}),": Combine multiple hook calls into one"]}),"\n",(0,s.jsxs)(t.li,{children:["\ud83d\udcaa ",(0,s.jsx)(t.strong,{children:"Enhanced Store Objects"}),": Get reactive state and store methods in one place"]}),"\n",(0,s.jsxs)(t.li,{children:["\ud83d\udee1\ufe0f ",(0,s.jsx)(t.strong,{children:"Type Safety"}),": Fully type-safe with TypeScript"]}),"\n",(0,s.jsxs)(t.li,{children:["\ud83d\udcc8 ",(0,s.jsx)(t.strong,{children:"Better Scalability"}),": Easily add more handlers without cluttering your component"]}),"\n",(0,s.jsxs)(t.li,{children:["\ud83d\udd04 ",(0,s.jsx)(t.strong,{children:"Unified Access"}),": Get loader data alongside your store data in one place"]}),"\n",(0,s.jsxs)(t.li,{children:["\u270f\ufe0f ",(0,s.jsx)(t.strong,{children:"Direct Mutations"}),": Update your state naturally with direct property assignments"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"-full-example",children:"\ud83d\ude80 Full Example"}),"\n",(0,s.jsx)(t.p,{children:"Here's a complete example with multiple stores and handlers:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'import { useJods } from "jods/remix";\nimport { todoStore, uiStore } from "~/stores";\n\nfunction TodoApp() {\n  const { stores, actions, loaderData } = useJods([todoStore, uiStore], {\n    todos: ["add", "delete", "toggle"],\n    ui: ["setTheme", "toggleSidebar"],\n  });\n\n  // Example of directly manipulating store properties\n  const toggleDarkMode = () => {\n    // Direct mutation of store properties\n    stores.ui.theme = stores.ui.theme === "dark" ? "light" : "dark";\n\n    // You can also directly mutate nested properties or arrays\n    if (stores.ui.recentThemes) {\n      stores.ui.recentThemes.push(stores.ui.theme);\n    }\n  };\n\n  // Use the direct store access for conditional logic\n  const isNewUser = stores.todos.items.length === 0;\n  const showWelcome = isNewUser && !stores.ui.welcomeDismissed;\n\n  return (\n    <div className={stores.ui.theme}>\n      <header>\n        <h1>{loaderData.title}</h1>\n        {showWelcome && (\n          <div className="welcome-banner">\n            <h2>Welcome to your Todo List!</h2>\n            <button onClick={() => (stores.ui.welcomeDismissed = true)}>\n              Got it\n            </button>\n          </div>\n        )}\n        <button onClick={toggleDarkMode}>\n          Switch to {stores.ui.theme === "dark" ? "Light" : "Dark"} Mode\n        </button>\n        <actions.ui.toggleSidebar.Form>\n          <button type="submit">\n            {stores.ui.sidebarOpen ? "Close" : "Open"} Sidebar\n          </button>\n        </actions.ui.toggleSidebar.Form>\n      </header>\n\n      <main>\n        <ul>\n          {stores.todos.items.map((todo) => (\n            <li key={todo.id} className={todo.completed ? "completed" : ""}>\n              {todo.text}\n              <div className="actions">\n                <actions.todos.toggle.Form>\n                  <input type="hidden" name="id" value={todo.id} />\n                  <button type="submit">\n                    {todo.completed ? "Mark Incomplete" : "Mark Complete"}\n                  </button>\n                </actions.todos.toggle.Form>\n\n                <actions.todos.delete.Form>\n                  <input type="hidden" name="id" value={todo.id} />\n                  <button type="submit">Delete</button>\n                </actions.todos.delete.Form>\n              </div>\n            </li>\n          ))}\n        </ul>\n\n        <actions.todos.add.Form>\n          <input name="text" placeholder="Add a new todo..." />\n          <button type="submit">Add</button>\n        </actions.todos.add.Form>\n      </main>\n\n      <footer>\n        <actions.ui.setTheme.Form>\n          <select name="theme" defaultValue={stores.ui.theme}>\n            <option value="light">Light</option>\n            <option value="dark">Dark</option>\n            <option value="system">System</option>\n          </select>\n          <button type="submit">Change Theme</button>\n        </actions.ui.setTheme.Form>\n      </footer>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"-wait-did-we-just",children:"\ud83e\udd14 Wait, Did We Just...?"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:'"Did I just obsolete forms for client-side updates? \ud83e\udd26 The data syncs back to the main store either way... Forms or direct mutations, jods handles it all!"'})}),"\n",(0,s.jsx)(t.p,{children:"With jods, you get the best of both worlds \ud83d\ude4c - server-side form submissions for permanent data changes and direct client-side mutations for responsive UI updates. Direct mutations give you that immediate reactive feel \ud83e\udd37, while forms handle the heavy lifting of server persistence. Use whichever fits your needs at the moment! \ud83d\ude47"})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},3774:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var n=o(6672);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);
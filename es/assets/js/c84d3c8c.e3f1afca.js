"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6964],{1484:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"remix/api-reference","title":"API Reference","description":"Complete API documentation for jods/remix","source":"@site/docs/remix/api-reference.md","sourceDirName":"remix","slug":"/remix/api-reference","permalink":"/jods/es/remix/api-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/remix/api-reference.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"API Reference","description":"Complete API documentation for jods/remix"},"sidebar":"jodsSidebar","previous":{"title":"\u26a1 Performance Tips","permalink":"/jods/es/remix/performance-tips"}}');var r=t(3420),i=t(3774);const o={sidebar_position:5,title:"API Reference",description:"Complete API documentation for jods/remix"},d="\ud83d\udcda API Reference: jods/remix",c={},a=[{value:"\ud83e\udde9 Core Functions",id:"-core-functions",level:2},{value:"\ud83c\udfd7\ufe0f <code>defineStore(options)</code>",id:"\ufe0f-definestoreoptions",level:3},{value:"\ud83e\ude9d React Hooks",id:"-react-hooks",level:2},{value:"\ud83d\udd0c <code>useJodsStore(store)</code>",id:"-usejodsstorestore",level:3},{value:"\ud83d\udccb <code>useJodsForm(actionHandler)</code>",id:"-usejodsformactionhandler",level:3},{value:"\ud83d\udce1 <code>useJodsFetchers(actionId)</code>",id:"-usejodsfetchersactionid",level:3},{value:"\ud83d\udd04 <code>useJodsTransition(actionId?)</code>",id:"-usejodstransitionactionid",level:3},{value:"\u26a1 <code>useOptimisticUpdate(store, actionName, optimisticDataFn)</code>",id:"-useoptimisticupdatestore-actionname-optimisticdatafn",level:3},{value:"\ud83d\udd0b Batching with Remix",id:"-batching-with-remix",level:2},{value:"\ud83d\udce6 Store Actions Pattern",id:"-store-actions-pattern",level:3},{value:"\ud83d\udd04 Integration with Remix",id:"-integration-with-remix",level:2},{value:"\ud83d\udd17 <code>withJods(stores, loaderFn?)</code>",id:"-withjodsstores-loaderfn",level:3},{value:"\ud83d\udda5\ufe0f Server Components",id:"\ufe0f-server-components",level:2},{value:"\ud83d\udd01 <code>rehydrateClient(jodsSnapshot, stores)</code>",id:"-rehydrateclientjodssnapshot-stores",level:3},{value:"\ud83d\udee0\ufe0f Utility Functions",id:"\ufe0f-utility-functions",level:2},{value:"\ud83d\udcf8 <code>getJodsSnapshot()</code>",id:"-getjodssnapshot",level:3},{value:"\ud83d\udd0c <code>connectActionToJods(store, actionHandler)</code>",id:"-connectactiontojodsstore-actionhandler",level:3},{value:"\ud83d\udd12 <code>setJodsCacheControl(headers, options)</code>",id:"-setjodscachecontrolheaders-options",level:3},{value:"\ud83e\udde0 Advanced Techniques",id:"-advanced-techniques",level:2},{value:"\ud83d\udd0d Accessing Initial Server Data via <code>useLoaderData()</code>",id:"-accessing-initial-server-data-via-useloaderdata",level:3},{value:"\ud83e\uddf0 Internal Utilities",id:"-internal-utilities",level:2},{value:"\ud83d\udd04 <code>parseFormData(formData)</code>",id:"-parseformdataformdata",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-api-reference-jodsremix",children:"\ud83d\udcda API Reference: jods/remix"})}),"\n",(0,r.jsxs)(n.p,{children:["This document provides detailed API documentation for all exports from the ",(0,r.jsx)(n.code,{children:"jods/remix"})," package."]}),"\n",(0,r.jsx)(n.h2,{id:"-core-functions",children:"\ud83e\udde9 Core Functions"}),"\n",(0,r.jsxs)(n.h3,{id:"\ufe0f-definestoreoptions",children:["\ud83c\udfd7\ufe0f ",(0,r.jsx)(n.code,{children:"defineStore(options)"})]}),"\n",(0,r.jsx)(n.p,{children:"Creates a reactive store with server-side handlers and loaders."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Object"})}),(0,r.jsx)(n.td,{children:"Configuration options for the store"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options.name"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Unique name for the store (required)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options.schema"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ZodSchema"})}),(0,r.jsx)(n.td,{children:"Zod schema for type validation"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options.defaults"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Object"})}),(0,r.jsx)(n.td,{children:"Default values for store properties"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options.handlers"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Object"})}),(0,r.jsx)(n.td,{children:"Form handler functions that process form submissions"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options.loader"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Function"})}),(0,r.jsx)(n.td,{children:"Async function that loads server data, similar to Remix loaders"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A store object with the following properties:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\udce6 ",(0,r.jsx)(n.code,{children:"name"}),": The store name"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd0d ",(0,r.jsx)(n.code,{children:"getState()"}),": Function to get the current state"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,r.jsx)(n.code,{children:"setState(newState)"}),": Function to update the state"]}),"\n",(0,r.jsxs)(n.li,{children:["\u26a1 ",(0,r.jsx)(n.code,{children:"actions"}),": Object containing all handler functions"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\uddc4\ufe0f ",(0,r.jsx)(n.code,{children:"store"}),": The underlying reactive store"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { defineStore } from "jods/remix";\nimport { z } from "zod";\n\nexport const user = defineStore({\n  name: "user",\n  schema: z.object({\n    name: z.string(),\n    email: z.string().email(),\n  }),\n  defaults: {\n    name: "Guest",\n    email: "",\n  },\n  handlers: {\n    async updateProfile({ current, form }) {\n      return {\n        ...current,\n        name: form.get("name"),\n        email: form.get("email"),\n      };\n    },\n  },\n  loader: async ({ request }) => {\n    // Load user data\n    return { name: "Burt Macklin", email: "burt.macklin@fbi.pawnee.city" };\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-react-hooks",children:"\ud83e\ude9d React Hooks"}),"\n",(0,r.jsxs)(n.h3,{id:"-usejodsstorestore",children:["\ud83d\udd0c ",(0,r.jsx)(n.code,{children:"useJodsStore(store)"})]}),"\n",(0,r.jsx)(n.p,{children:"React hook for subscribing to a jods store. This is the primary way to access jods data reactively in your components."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"store"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Object"})}),(0,r.jsx)(n.td,{children:"A jods store created with defineStore"})]})})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," The current state of the store, updated reactively when:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcdd Form submissions happen via ",(0,r.jsx)(n.code,{children:"useJodsForm()"})]}),"\n",(0,r.jsx)(n.li,{children:"\ud83d\uddb1\ufe0f Client-side store mutations occur"}),"\n",(0,r.jsx)(n.li,{children:"\ud83c\udf10 Server fetches update the store"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useJodsStore } from "jods/remix";\nimport { user } from "~/jods/user.jods";\n\nfunction ProfilePage() {\n  const userData = useJodsStore(user);\n\n  return (\n    <div>\n      <h1>Hello, {userData.name}</h1>\n      <p>Email: {userData.email}</p>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"-usejodsformactionhandler",children:["\ud83d\udccb ",(0,r.jsx)(n.code,{children:"useJodsForm(actionHandler)"})]}),"\n",(0,r.jsx)(n.p,{children:"Creates form bindings for a jods store action."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"actionHandler"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Function"})}),(0,r.jsx)(n.td,{children:"A handler function from a jods store"})]})})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," An object with the following properties:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd27 ",(0,r.jsx)(n.code,{children:"props"}),": Form props (action, method, etc.)"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,r.jsx)(n.code,{children:"submit(event)"}),": Function to submit the form programmatically"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,r.jsx)(n.code,{children:"reset()"}),": Function to reset the form"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcca ",(0,r.jsx)(n.code,{children:"formData"}),": Current form data (after submission)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useJodsForm } from "jods/remix";\nimport { user } from "~/jods/user.jods";\n\nfunction ProfileForm() {\n  const form = useJodsForm(user.actions.updateProfile);\n\n  return (\n    <form {...form.props}>\n      <input name="name" />\n      <input name="email" type="email" />\n      <button type="submit">Update Profile</button>\n    </form>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"-usejodsfetchersactionid",children:["\ud83d\udce1 ",(0,r.jsx)(n.code,{children:"useJodsFetchers(actionId)"})]}),"\n",(0,r.jsx)(n.p,{children:"Hook to track the state of all fetchers for a specific jods store action."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"actionId"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"The action identifier (storeName.actionName)"})]})})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," An object with the following properties:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,r.jsx)(n.code,{children:"isSubmitting"}),": Boolean indicating if any fetchers are submitting"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.code,{children:"isComplete"}),": Boolean indicating if all fetchers are complete"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd22 ",(0,r.jsx)(n.code,{children:"count"}),": Number of fetchers for this action"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udce6 ",(0,r.jsx)(n.code,{children:"fetchers"}),": Array of fetcher objects"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useJodsFetchers } from "jods/remix";\n\nfunction SubmitButton() {\n  const { isSubmitting } = useJodsFetchers("cart.addItem");\n\n  return (\n    <button type="submit" disabled={isSubmitting}>\n      {isSubmitting ? "Adding..." : "Add to Cart"}\n    </button>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"-usejodstransitionactionid",children:["\ud83d\udd04 ",(0,r.jsx)(n.code,{children:"useJodsTransition(actionId?)"})]}),"\n",(0,r.jsx)(n.p,{children:"Hook to track transition state for jods action submissions."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"actionId"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Optional action identifier to filter transitions"})]})})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," An object with the following properties:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\udce4 ",(0,r.jsx)(n.code,{children:"isSubmitting"}),": Boolean indicating if the transition is submitting"]}),"\n",(0,r.jsxs)(n.li,{children:["\u23f3 ",(0,r.jsx)(n.code,{children:"isPending"}),": Boolean indicating if the transition is pending"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcdd ",(0,r.jsx)(n.code,{children:"formData"}),": The form data being submitted"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useJodsTransition } from "jods/remix";\n\nfunction FormStatus() {\n  const { isPending } = useJodsTransition("user.updateProfile");\n\n  return isPending ? <LoadingIndicator /> : null;\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"-useoptimisticupdatestore-actionname-optimisticdatafn",children:["\u26a1 ",(0,r.jsx)(n.code,{children:"useOptimisticUpdate(store, actionName, optimisticDataFn)"})]}),"\n",(0,r.jsx)(n.p,{children:"Hook for implementing optimistic UI updates with jods stores."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"store"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Object"})}),(0,r.jsx)(n.td,{children:"A jods store created with defineStore"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"actionName"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"The name of the action being performed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"optimisticDataFn"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Function"})}),(0,r.jsx)(n.td,{children:"Function that returns the optimistic state update"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," Either the optimistic state or the current state if not submitting"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useOptimisticUpdate } from "jods/remix";\nimport { todo } from "~/jods/todo.jods";\n\nfunction TodoList() {\n  const optimisticTodos = useOptimisticUpdate(\n    todo,\n    "toggleComplete",\n    (currentState) => ({\n      items: currentState.items.map((item) =>\n        item.id === toggledId ? { ...item, completed: !item.completed } : item\n      ),\n    })\n  );\n\n  return (\n    <ul>\n      {optimisticTodos.items.map((item) => (\n        <li key={item.id}>{item.text}</li>\n      ))}\n    </ul>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-batching-with-remix",children:"\ud83d\udd0b Batching with Remix"}),"\n",(0,r.jsx)(n.p,{children:"When using jods with Remix, you should organize batch operations in a way that separates UI components from store logic. This pattern works especially well with Remix's form-based architecture."}),"\n",(0,r.jsx)(n.h3,{id:"-store-actions-pattern",children:"\ud83d\udce6 Store Actions Pattern"}),"\n",(0,r.jsx)(n.p,{children:"The recommended pattern is to create a module with store actions that use batching, then import these into your Remix route components."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'// app/jods/todo.jods.js\nimport { defineStore } from "jods/remix";\nimport { z } from "zod";\n\nexport const todo = defineStore({\n  name: "todo",\n  schema: z.object({\n    items: z.array(\n      z.object({\n        id: z.string(),\n        text: z.string(),\n        completed: z.boolean(),\n      })\n    ),\n    filter: z.enum(["all", "active", "completed"]).default("all"),\n    loading: z.boolean().default(false),\n  }),\n  defaults: {\n    items: [],\n    filter: "all",\n    loading: false,\n  },\n  // Handler for form submissions\n  handlers: {\n    async addTodo({ current, form }) {\n      const text = form.get("text")?.toString() || "";\n\n      // Use batching for consistent state updates\n      current.store.batch(() => {\n        current.loading = true;\n        current.items = [\n          ...current.items,\n          { id: crypto.randomUUID(), text, completed: false },\n        ];\n        current.loading = false;\n      });\n\n      return current;\n    },\n  },\n});\n\n// Client-side actions that use batching\nexport function toggleTodo(id) {\n  todo.store.batch(() => {\n    const items = [...todo.store.items];\n    const index = items.findIndex((item) => item.id === id);\n    if (index !== -1) {\n      items[index] = { ...items[index], completed: !items[index].completed };\n      todo.store.items = items;\n    }\n  });\n}\n\nexport function clearCompleted() {\n  todo.store.batch(() => {\n    todo.store.items = todo.store.items.filter((item) => !item.completed);\n  });\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This approach keeps components clean and focused on the UI:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'// app/routes/todos.tsx\nimport { useJodsStore, useJodsForm } from "jods/remix";\nimport { todo, toggleTodo, clearCompleted } from "~/jods/todo.jods";\n\nexport default function TodosRoute() {\n  // Get the current state\n  const todoState = useJodsStore(todo);\n  // Create form bindings for the addTodo handler\n  const form = useJodsForm(todo.actions.addTodo);\n\n  return (\n    <div>\n      <form {...form.props}>\n        <input name="text" />\n        <button type="submit" disabled={todoState.loading}>\n          Add Todo\n        </button>\n      </form>\n\n      <ul>\n        {todoState.items.map((item) => (\n          <li key={item.id}>\n            <input\n              type="checkbox"\n              checked={item.completed}\n              onChange={() => toggleTodo(item.id)}\n            />\n            {item.text}\n          </li>\n        ))}\n      </ul>\n\n      <button onClick={clearCompleted}>Clear Completed</button>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-integration-with-remix",children:"\ud83d\udd04 Integration with Remix"}),"\n",(0,r.jsxs)(n.h3,{id:"-withjodsstores-loaderfn",children:["\ud83d\udd17 ",(0,r.jsx)(n.code,{children:"withJods(stores, loaderFn?)"})]}),"\n",(0,r.jsxs)(n.p,{children:["Creates a Remix loader that integrates jods stores with Remix's data loading system. This enables server-loaded data to be available reactively on the client through ",(0,r.jsx)(n.code,{children:"useJodsStore"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"stores"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Array"})}),(0,r.jsx)(n.td,{children:"Array of jods stores created with defineStore"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"loaderFn"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Function"})}),(0,r.jsx)(n.td,{children:"Optional function to provide additional data"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A Remix-compatible loader function"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Simplified Usage Pattern:"})}),"\n",(0,r.jsx)(n.p,{children:"The most common pattern is to define a store in a dedicated jods file and export ready-to-use loader and action functions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// app/jods/cart.jods.ts\nimport { defineStore, withJods } from "jods/remix";\n\nexport const cart = defineStore({\n  name: "cart",\n  defaults: { items: [] },\n  handlers: {\n    async addItem({ current, form }) {\n      // Implementation\n    },\n  },\n  loader: async ({ request }) => {\n    // Load cart items\n    return { items: await fetchCartItems(request) };\n  },\n});\n\n// Export ready-to-use loader and action for routes\n// You can export the loader in two equivalent ways:\nexport const loader = withJods([cart]); // Method 1: Using withJods\n// export const loader = cart.loader;    // Method 2: Direct export (simpler for single store)\nexport const action = cart.action;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then in your route file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// app/routes/cart.tsx\nexport { loader, action } from "~/jods/cart.jods";\n\nimport { useJodsStore, useJodsForm } from "jods/remix";\nimport { cart } from "~/jods/cart.jods";\n\nexport default function CartRoute() {\n  const cartData = useJodsStore(cart);\n  const addItemForm = useJodsForm(cart.actions.addItem);\n\n  return (\n    // UI implementation\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This pattern eliminates the need to write loader and action functions in your route files, making them much cleaner."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example with Additional Data:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { withJods } from "jods/remix";\nimport { user } from "~/jods/user.jods";\nimport { cart } from "~/jods/cart.jods";\n\nexport const loader = withJods([user, cart], async ({ request }) => {\n  // Return additional data\n  return {\n    flash: getFlashMessage(request),\n  };\n});\n\n// In your component\nimport { useJodsStore } from "jods/remix";\n\nexport default function MyComponent() {\n  const userData = useJodsStore(user);\n  const cartData = useJodsStore(cart);\n\n  // Use userData and cartData reactively\n  return (\n    // UI implementation\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-server-components",children:"\ud83d\udda5\ufe0f Server Components"}),"\n",(0,r.jsxs)(n.h3,{id:"-rehydrateclientjodssnapshot-stores",children:["\ud83d\udd01 ",(0,r.jsx)(n.code,{children:"rehydrateClient(jodsSnapshot, stores)"})]}),"\n",(0,r.jsx)(n.p,{children:"A crucial client-side function to rehydrate jods stores from server-generated snapshots. This function should be called in your app's entry client file to ensure that server-rendered state is properly synchronized with client-side jods stores."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why is this needed?"}),"\n",(0,r.jsx)(n.strong,{children:"You must use this function in every Remix app that uses jods stores."})," During the Remix SSR lifecycle, data is loaded on the server through loaders, then sent to the client as part of the initial HTML. Without explicit hydration, your client-side jods stores would start empty, regardless of what was loaded on the server. The ",(0,r.jsx)(n.code,{children:"rehydrateClient"})," function establishes this critical server-to-client data bridge."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"When do you need this?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Always required"})," when using any jods stores with Remix, even with a single store"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Add it to your ",(0,r.jsx)(n.code,{children:"entry.client.tsx"})," file as shown in the example below"]}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Include all your jods stores in the stores array parameter"}),"\n",(0,r.jsx)(n.li,{children:'\u274c There is no "batteries-included" version that does this automatically'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Alternative approaches:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For simpler projects, you could create a custom wrapper function in your app that imports all stores and calls ",(0,r.jsx)(n.code,{children:"rehydrateClient"})," automatically"]}),"\n",(0,r.jsxs)(n.li,{children:["A future version of jods may provide a simplified API like ",(0,r.jsx)(n.code,{children:"setupJodsRemix()"})," that handles this automatically. (see ",(0,r.jsx)(n.a,{href:"https://github.com/clamstew/jods/issues/28",children:"issue jods#28"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"jodsSnapshot"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Record<string, any>"})}),(0,r.jsx)(n.td,{children:"An object mapping store names to their initial state data"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"stores"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Array<Store>"})}),(0,r.jsx)(n.td,{children:"Array of jods store instances to be hydrated"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"When to use:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In your app's entry client file (",(0,r.jsx)(n.code,{children:"entry.client.tsx"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"After the initial render, to hydrate jods stores with server data"}),"\n",(0,r.jsx)(n.li,{children:"Before user interactions that might depend on reactive store data"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'// app/entry.client.tsx\nimport { hydrateRoot } from "react-dom/client";\nimport { RemixBrowser } from "@remix-run/react";\nimport { rehydrateClient } from "jods/remix";\nimport { user } from "./jods/user.jods";\nimport { cart } from "./jods/cart.jods";\n\n// Get the server snapshot from window.__JODS_DATA__\n// This is typically injected by the server renderer\nconst jodsSnapshot = window.__JODS_DATA__ || {};\n\n// Rehydrate all jods stores with their initial server data\nrehydrateClient(jodsSnapshot, [user, cart]);\n\n// Then proceed with standard Remix hydration\nhydrateRoot(document, <RemixBrowser />);\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Root Layout Component Example:"})}),"\n",(0,r.jsx)(n.p,{children:"To make the server snapshot available on the client, include it in your root layout:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'// app/root.tsx\nimport { json } from "@remix-run/node";\nimport { Links, Meta, Outlet, Scripts, useLoaderData } from "@remix-run/react";\nimport { withJods } from "jods/remix";\nimport { user } from "./jods/user.jods";\nimport { cart } from "./jods/cart.jods";\n\n// Integrate jods with your root loader\nexport const loader = withJods([user, cart]);\n\nexport default function App() {\n  const data = useLoaderData();\n\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n\n        {/* This makes the jods data available to the client */}\n        <script\n          dangerouslySetInnerHTML={{\n            __html: `window.__JODS_DATA__ = ${JSON.stringify(\n              data.__jods || {}\n            )};`,\n          }}\n        />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Technical Details:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"rehydrateClient"})," function uses ",(0,r.jsx)(n.code,{children:"Object.assign"})," to update store properties, which properly triggers signals in the reactive system"]}),"\n",(0,r.jsx)(n.li,{children:"It handles missing or partial snapshots gracefully, only updating stores that have matching data"}),"\n",(0,r.jsx)(n.li,{children:'This is essential for the "hydration" phase of a Remix application, where server-rendered HTML becomes interactive'}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-utility-functions",children:"\ud83d\udee0\ufe0f Utility Functions"}),"\n",(0,r.jsxs)(n.h3,{id:"-getjodssnapshot",children:["\ud83d\udcf8 ",(0,r.jsx)(n.code,{children:"getJodsSnapshot()"})]}),"\n",(0,r.jsx)(n.p,{children:"Creates a snapshot of all registered jods stores."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," An object containing all store states by name"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { getJodsSnapshot } from "jods/remix";\n\n// In your loader\nexport const loader = async () => {\n  // ...load data and update stores\n\n  // Get snapshot of all stores\n  const storeSnapshot = getJodsSnapshot();\n\n  return { snapshot: storeSnapshot };\n};\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"-connectactiontojodsstore-actionhandler",children:["\ud83d\udd0c ",(0,r.jsx)(n.code,{children:"connectActionToJods(store, actionHandler)"})]}),"\n",(0,r.jsx)(n.p,{children:"Connects an existing Remix action to a jods store."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"store"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Object"})}),(0,r.jsx)(n.td,{children:"A jods store created with defineStore"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"actionHandler"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Function"})}),(0,r.jsx)(n.td,{children:"The existing Remix action handler"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A new action handler that updates the jods store"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { connectActionToJods } from "jods/remix";\nimport { user } from "~/jods/user.jods";\n\n// Existing action\nconst existingAction = async ({ request }) => {\n  const form = await request.formData();\n  const updatedUser = await updateUser(form);\n  return updatedUser;\n};\n\n// Connect to jods\nexport const action = connectActionToJods(user, existingAction);\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"-setjodscachecontrolheaders-options",children:["\ud83d\udd12 ",(0,r.jsx)(n.code,{children:"setJodsCacheControl(headers, options)"})]}),"\n",(0,r.jsx)(n.p,{children:"Utility to set cache control headers for jods store loaders."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"headers"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Headers"})}),(0,r.jsx)(n.td,{children:"The headers object from the loader"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Object"})}),(0,r.jsx)(n.td,{children:"Cache configuration options"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options.maxAge"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"Maximum age in seconds (default: 0)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options.staleWhileRevalidate"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"Stale-while-revalidate time in seconds (default: 0)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options.private"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:"Whether the response is private (default: true)"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { setJodsCacheControl } from "jods/remix";\n\nexport const products = defineStore({\n  name: "products",\n  // ...\n  loader: async ({ request }) => {\n    const headers = new Headers();\n\n    // Set cache for 5 minutes\n    setJodsCacheControl(headers, {\n      maxAge: 300,\n      staleWhileRevalidate: 600,\n      private: false,\n    });\n\n    return getProducts();\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-advanced-techniques",children:"\ud83e\udde0 Advanced Techniques"}),"\n",(0,r.jsxs)(n.h3,{id:"-accessing-initial-server-data-via-useloaderdata",children:["\ud83d\udd0d Accessing Initial Server Data via ",(0,r.jsx)(n.code,{children:"useLoaderData()"})]}),"\n",(0,r.jsxs)(n.p,{children:["While ",(0,r.jsx)(n.code,{children:"useJodsStore"})," is the recommended way to access jods data, you can also access the initial server-loaded data via ",(0,r.jsx)(n.code,{children:"useLoaderData().__jods"}),". This is primarily useful for debugging and specialized use cases."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["When to use ",(0,r.jsx)(n.code,{children:"useLoaderData().__jods"}),":"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\ud83d\udc1e For debugging server/client state differences"}),"\n",(0,r.jsx)(n.li,{children:'\ud83d\udd04 When implementing "reset to initial values" functionality'}),"\n",(0,r.jsx)(n.li,{children:"\ud83d\udd0e When you specifically need to know what data was initially rendered by the server"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useLoaderData } from "@remix-run/react";\nimport { useJodsStore } from "jods/remix";\nimport { user } from "~/jods/user.jods";\n\nexport default function DebugComponent() {\n  // Reactive store data that updates with form submissions/mutations\n  const userData = useJodsStore(user);\n\n  // Static snapshot of initial server data (never changes)\n  const data = useLoaderData();\n  const initialUserData = data.__jods?.user;\n\n  // Compare current state to initial server state\n  const hasChanged =\n    JSON.stringify(userData) !== JSON.stringify(initialUserData);\n\n  return (\n    <div>\n      <div>Current state: {JSON.stringify(userData)}</div>\n      <div>Initial state: {JSON.stringify(initialUserData)}</div>\n      {hasChanged && (\n        <button onClick={() => user.setState(initialUserData)}>\n          Reset to initial state\n        </button>\n      )}\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-internal-utilities",children:"\ud83e\uddf0 Internal Utilities"}),"\n",(0,r.jsxs)(n.h3,{id:"-parseformdataformdata",children:["\ud83d\udd04 ",(0,r.jsx)(n.code,{children:"parseFormData(formData)"})]}),"\n",(0,r.jsx)(n.p,{children:"Converts a FormData object into a structured JavaScript object."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"formData"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"FormData"})}),(0,r.jsx)(n.td,{children:"The FormData object to parse"})]})})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," Parsed JavaScript object"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { parseFormData } from "jods/remix";\n\nconst form = new FormData();\nform.append("user.name", "Burt Macklin");\nform.append("user.email", "burt.macklin@fbi.pawnee.city");\n\nconst parsed = parseFormData(form);\n// Result: { user: { name: "Burt Macklin", email: "burt.macklin@fbi.pawnee.city" } }\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},3774:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var s=t(6672);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
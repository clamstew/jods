"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5441],{930:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"remix/common-patterns","title":"Common Patterns","description":"Best practices and common patterns for using jods with Remix","source":"@site/docs/remix/common-patterns.md","sourceDirName":"remix","slug":"/remix/common-patterns","permalink":"/jods/es/remix/common-patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/remix/common-patterns.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Common Patterns","description":"Best practices and common patterns for using jods with Remix"},"sidebar":"jodsSidebar","previous":{"title":"\ud83d\udd04 Migration Guide","permalink":"/jods/es/remix/migration-guide"},"next":{"title":"\u26a1 Performance Tips","permalink":"/jods/es/remix/performance-tips"}}');var r=t(3420),o=t(3774);const i={sidebar_position:3,title:"Common Patterns",description:"Best practices and common patterns for using jods with Remix"},a="\ud83e\udde9 Common Patterns with jods and Remix",d={},m=[{value:"\ud83d\udea8 Error Handling",id:"-error-handling",level:2},{value:"\ud83d\udd04 Dependent Data Loading",id:"-dependent-data-loading",level:2},{value:"\u2705 Form Validation",id:"-form-validation",level:2},{value:"\u26a1 Optimistic UI Updates",id:"-optimistic-ui-updates",level:2},{value:"\ud83d\udccb Nested Forms",id:"-nested-forms",level:2},{value:"\ud83d\udd04 Tracking Loading/Submission State",id:"-tracking-loadingsubmission-state",level:2},{value:"\ud83d\udcbe Caching Strategies",id:"-caching-strategies",level:2},{value:"\ud83d\udcdd Sequential Form Submissions",id:"-sequential-form-submissions",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-common-patterns-with-jods-and-remix",children:"\ud83e\udde9 Common Patterns with jods and Remix"})}),"\n",(0,r.jsx)(n.p,{children:"This guide covers common patterns and best practices for using jods with Remix applications."}),"\n",(0,r.jsx)(n.h2,{id:"-error-handling",children:"\ud83d\udea8 Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"Handling errors gracefully in form submissions and loaders:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'export const user = defineStore({\n  // ...\n  handlers: {\n    async updateProfile({ current, form }) {\n      try {\n        // Validate input\n        const name = form.get("name");\n        if (!name || typeof name !== "string") {\n          return {\n            ...current,\n            error: "Name is required",\n            formError: true,\n          };\n        }\n\n        // Attempt update\n        await updateUserInDb({ name });\n        return {\n          ...current,\n          name,\n          error: null,\n          formError: false,\n          updated: true,\n        };\n      } catch (error) {\n        // Return error state\n        return {\n          ...current,\n          error: error.message,\n          formError: true,\n          updated: false,\n        };\n      }\n    },\n  },\n});\n\n// In your component\nfunction ProfileForm() {\n  const userData = useJodsStore(user);\n  const form = useJodsForm(user.actions.updateProfile);\n\n  return (\n    <form {...form.props}>\n      {userData.formError && <div className="error">{userData.error}</div>}\n      <input name="name" defaultValue={userData.name} />\n      <button type="submit">Update Profile</button>\n      {userData.updated && <div className="success">Profile updated!</div>}\n    </form>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-dependent-data-loading",children:"\ud83d\udd04 Dependent Data Loading"}),"\n",(0,r.jsx)(n.p,{children:"When one store depends on another:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'export const user = defineStore({\n  name: "user",\n  schema: userSchema,\n  loader: async () => getUserFromDb(),\n});\n\nexport const posts = defineStore({\n  name: "posts",\n  schema: postsSchema,\n  loader: async ({ getState }) => {\n    // Get data from another store\n    const userData = getState("user");\n    if (!userData?.id) {\n      return [];\n    }\n    return getPostsForUser(userData.id);\n  },\n});\n\n// Use both stores in your route\nexport const loader = withJods([user, posts]);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-form-validation",children:"\u2705 Form Validation"}),"\n",(0,r.jsx)(n.p,{children:"Using Zod for form validation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\n\nconst contactSchema = z.object({\n  name: z.string().min(2, "Name must be at least 2 characters"),\n  email: z.string().email("Please enter a valid email"),\n  message: z.string().min(10, "Message must be at least 10 characters"),\n});\n\nexport const contact = defineStore({\n  name: "contact",\n  schema: contactSchema.extend({\n    // Add additional fields for form state\n    errors: z.record(z.string()).optional(),\n    success: z.boolean().optional(),\n  }),\n  defaults: {\n    name: "",\n    email: "",\n    message: "",\n  },\n  handlers: {\n    async submit({ form }) {\n      const data = {\n        name: form.get("name"),\n        email: form.get("email"),\n        message: form.get("message"),\n      };\n\n      // Validate using Zod\n      const result = contactSchema.safeParse(data);\n\n      if (!result.success) {\n        // Return validation errors\n        return {\n          ...data,\n          errors: result.error.flatten().fieldErrors,\n          success: false,\n        };\n      }\n\n      // Process valid submission\n      await sendContactForm(result.data);\n\n      return {\n        name: "",\n        email: "",\n        message: "",\n        errors: {},\n        success: true,\n      };\n    },\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-optimistic-ui-updates",children:"\u26a1 Optimistic UI Updates"}),"\n",(0,r.jsx)(n.p,{children:"Implementing optimistic UI for better user experience:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useOptimisticUpdate, useJodsForm, useJodsStore } from "jods/remix";\nimport { todo } from "~/jods/todo.jods";\n\nfunction TodoList() {\n  const todoData = useJodsStore(todo);\n  const form = useJodsForm(todo.actions.toggleComplete);\n\n  // Create optimistic UI updates when toggling todo items\n  const optimisticTodos = useOptimisticUpdate(\n    todo,\n    "toggleComplete",\n    (currentState) => {\n      const todoId = form.formData?.get("id") as string;\n      if (!todoId) return currentState;\n\n      return {\n        items: currentState.items.map((item) =>\n          item.id === todoId ? { ...item, completed: !item.completed } : item\n        ),\n      };\n    }\n  );\n\n  return (\n    <div>\n      <h1>Todo List</h1>\n      <ul>\n        {optimisticTodos.items.map((item) => (\n          <li key={item.id} className={item.completed ? "completed" : ""}>\n            <form {...form.props}>\n              <input type="hidden" name="id" value={item.id} />\n              <button type="submit">\n                {item.completed ? "Mark Incomplete" : "Mark Complete"}\n              </button>\n            </form>\n            {item.text}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-nested-forms",children:"\ud83d\udccb Nested Forms"}),"\n",(0,r.jsx)(n.p,{children:"Handling nested data structures in forms:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'export const profile = defineStore({\n  name: "profile",\n  schema: z.object({\n    name: z.string(),\n    address: z.object({\n      street: z.string(),\n      city: z.string(),\n      zipCode: z.string(),\n    }),\n  }),\n  handlers: {\n    async updateAddress({ current, form }) {\n      return {\n        ...current,\n        address: {\n          street: form.get("street"),\n          city: form.get("city"),\n          zipCode: form.get("zipCode"),\n        },\n      };\n    },\n  },\n});\n\n// In your component\nfunction AddressForm() {\n  const profileData = useJodsStore(profile);\n  const form = useJodsForm(profile.actions.updateAddress);\n\n  return (\n    <form {...form.props}>\n      <input name="street" defaultValue={profileData.address.street} />\n      <input name="city" defaultValue={profileData.address.city} />\n      <input name="zipCode" defaultValue={profileData.address.zipCode} />\n      <button type="submit">Update Address</button>\n    </form>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-tracking-loadingsubmission-state",children:"\ud83d\udd04 Tracking Loading/Submission State"}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"useJodsFetchers"})," and ",(0,r.jsx)(n.code,{children:"useJodsTransition"})," to provide feedback:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useJodsFetchers, useJodsTransition } from "jods/remix";\n\nfunction SubmitButton() {\n  const { isSubmitting } = useJodsFetchers("profile.updateProfile");\n  const { isPending } = useJodsTransition("profile.updateProfile");\n\n  const isBusy = isSubmitting || isPending;\n\n  return (\n    <>\n      <button type="submit" disabled={isBusy}>\n        {isBusy ? "Saving..." : "Save Profile"}\n      </button>\n      {isBusy && <div className="spinner" />}\n    </>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-caching-strategies",children:"\ud83d\udcbe Caching Strategies"}),"\n",(0,r.jsx)(n.p,{children:"Using the cache control utilities:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { setJodsCacheControl } from "jods/remix";\n\nexport const products = defineStore({\n  name: "products",\n  schema: productsSchema,\n  loader: async ({ request }) => {\n    // Get headers from request\n    const url = new URL(request.url);\n    const headers = new Headers();\n\n    // Get products data\n    const products = await getProducts();\n\n    // Set cache control headers - cache for 5 minutes\n    setJodsCacheControl(headers, {\n      maxAge: 300,\n      staleWhileRevalidate: 600,\n      private: false,\n    });\n\n    return products;\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-sequential-form-submissions",children:"\ud83d\udcdd Sequential Form Submissions"}),"\n",(0,r.jsx)(n.p,{children:"Handling forms that should be submitted in a specific order:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'function MultiStepForm() {\n  const [step, setStep] = useState(1);\n  const formData = useJodsStore(formStore);\n\n  // Different form for each step\n  const step1Form = useJodsForm(formStore.actions.saveStep1);\n  const step2Form = useJodsForm(formStore.actions.saveStep2);\n  const submitForm = useJodsForm(formStore.actions.submit);\n\n  // Track submission state\n  const { isSubmitting } = useJodsFetchers("formStore.submit");\n\n  return (\n    <div>\n      {step === 1 && (\n        <form\n          {...step1Form.props}\n          onSubmit={(e) => {\n            e.preventDefault();\n            step1Form.submit(e).then(() => setStep(2));\n          }}\n        >\n          {/* Step 1 fields */}\n          <button type="submit">Next</button>\n        </form>\n      )}\n\n      {step === 2 && (\n        <form\n          {...step2Form.props}\n          onSubmit={(e) => {\n            e.preventDefault();\n            step2Form.submit(e).then(() => setStep(3));\n          }}\n        >\n          {/* Step 2 fields */}\n          <button type="button" onClick={() => setStep(1)}>\n            Back\n          </button>\n          <button type="submit">Next</button>\n        </form>\n      )}\n\n      {step === 3 && (\n        <form {...submitForm.props}>\n          <div className="summary">{/* Show summary of entered data */}</div>\n          <button type="button" onClick={() => setStep(2)}>\n            Back\n          </button>\n          <button type="submit" disabled={isSubmitting}>\n            {isSubmitting ? "Submitting..." : "Submit"}\n          </button>\n        </form>\n      )}\n    </div>\n  );\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},3774:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6672);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);
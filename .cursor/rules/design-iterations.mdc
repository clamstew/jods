---
description: Guidelines for using the design iterations workflow for UI components
globs: ["docs/**/*.{tsx,jsx,js,ts,mjs}", "docs/**/*.css", "docs/**/*.md"]
alwaysApply: false
---
# Design Iterations System

The Design Iterations system is a powerful workflow that combines Playwright screenshots with AI assistance to rapidly evolve UI components through multiple iterations.

## Quick Start

```bash
# Generate design iterations for a specific target only
pnpm docs:design-iterations:count-5 --target="try-jods-section" --prompt="Reimagine with bold visual hierarchy" --skip-other-sections
```

## <critical> Proper Workflow Sequence </critical>

**CRITICAL**: Follow this sequence exactly to ensure each iteration captures distinct designs:

1. **Modify component code** - Make your design changes to both TSX/JSX and CSS files
2. **Save changes** - Ensure all files are saved
3. **Wait for rebuild** - Allow 30-45 seconds for DocuSaurus to fully rebuild
4. **Verify changes** - Confirm in the browser that your design changes are visible
5. **Capture ONE iteration** - Run the screenshot command for just this iteration
6. **Make new changes** - Create a different design for the next iteration
7. **Repeat steps 2-5** - Follow the same sequence for each iteration

```bash
# CORRECT: One iteration at a time with verification between each
# First modify component code, save, wait 30-45 seconds, verify in browser, then:
pnpm docs:design-iterations:count-1 --target="try-jods-section" --skip-other-sections

# INCORRECT: Running multiple iterations without verification
pnpm docs:design-iterations:count-3 --target="try-jods-section" --skip-other-sections
```

## <required> Artifact Preservation </required>

**IMPORTANT**: Do NOT clean up design iteration artifacts until explicitly requested by the user. Artifacts are essential for:

1. **Design review** - Comparing multiple design approaches
2. **Feedback collection** - Adding notes to feedback templates
3. **Iteration refinement** - Using previous designs as reference
4. **Final application** - Selecting the best design to apply

Only run cleanup after the user has:
1. Reviewed all design iterations
2. Applied their chosen design
3. Explicitly requested cleanup with `pnpm docs:design-iterations:cleanup`

The agent CANNOT know when the user is done reviewing design iterations. Premature cleanup could cause loss of valuable information. Cleanup should ONLY happen when explicitly requested, not automatically.

## Styling Approach: Follow Component Conventions

**IMPORTANT**: Always match the existing styling conventions of the component:

1. **First analyze the component** to determine its styling approach:
   - Check imports at the top for CSS/SCSS module imports
   - Look for className references that use imported styles
   - Notice any CSS-in-JS patterns or inline styles

2. **Common styling approaches**:
   - **CSS Modules**: `import styles from './Component.module.css'` → Use `className={styles.element}`
   - **Global CSS**: `import './Component.css'` → Use `className="element"`
   - **CSS-in-JS**: Look for styled-components or emotion usage
   - **Tailwind**: Look for utility class patterns like `className="flex items-center"`

3. **Examples of following conventions**:

```tsx
// If the component uses CSS modules:
import styles from './InteractiveDemo.module.css';
// ...
<div className={styles.demoContainer}>

// If the component uses global CSS:
import './InteractiveDemo.css';
// ...
<div className="demo-container">

// If the component uses inline styles:
<div style={{ display: 'flex', gap: '1rem' }}>
```

## <required> Component Code Updates Required </required>

For each design iteration, you MUST modify the component code BEFORE taking screenshots:

1. **Step 1: Edit the component code directly** - Before generating the screenshot for each iteration, modify the component's TSX/JSX and CSS code according to the design prompt
2. **Step 2: Wait for changes to apply** - Allow sufficient time (30-45 seconds) for DocuSaurus to rebuild with the new changes
3. **Step 3: Then run the screenshot command** - Each iteration should capture a visually distinct design

Example workflow:
```bash
# First modify the component code (edit both TSX and CSS files if needed)
# Edit src/components/InteractiveDemo.tsx
# Edit src/components/InteractiveDemo.module.css (if the component uses CSS modules)
# After saving changes, wait 30-45 seconds, then run:
pnpm docs:design-iterations:count-1 --target="try-jods-section" --skip-other-sections

# Then modify the component code differently
# After saving changes, wait 30-45 seconds, then run:
pnpm docs:design-iterations:count-1 --target="try-jods-section" --skip-other-sections

# Repeat for each unique design iteration
```

## Important: Component Name Formats

You can use either the simple name or the full name with numeric prefix:

```bash
# These are equivalent:
pnpm docs:design-iterations:count-5 --target="try-jods-section" --skip-other-sections
pnpm docs:design-iterations:count-5 --target="03-try-jods-section" --skip-other-sections
```

Available component names:
- `hero-section` or `01-hero-section`
- `features-section` or `02-features-section`
- `try-jods-section` or `03-try-jods-section`
- `framework-section-react` or `04-framework-section-react`
- `framework-section-remix` or `04-framework-section-remix`
- `remix-section` or `05-remix-section`
- `compare-section` or `06-compare-section`
- `footer-section` or `07-footer-section`

## <required> Important: Using --skip-other-sections Flag </required>

The `--skip-other-sections` flag is **crucial** when you want to focus on a single component without affecting or capturing other sections:

```bash
# CORRECT: Focus ONLY on the specified target
pnpm docs:design-iterations:count-5 --target="try-jods-section" --skip-other-sections

# INCORRECT: Will generate screenshots for ALL sections
pnpm docs:design-iterations:count-5 --target="try-jods-section"
```

This is essential to avoid the workflow generating unnecessary files for sections you're not changing.

## AI-Driven Workflow

When a user asks about design iterations, you should:

1. **Understand their target component** and where the code is located:
   - `try-jods-section` - Interactive demo section → `docs/src/components/InteractiveDemo.tsx`
   - `hero-section` - Main hero section on homepage → `docs/src/components/HeroSection.tsx`
   - `features-section` - Features grid on homepage → `docs/src/components/FeaturesSection.tsx`
   - `framework-section-react` - React framework comparison → `docs/src/components/FrameworkSection.tsx`
   - `framework-section-remix` - Remix framework section → `docs/src/components/FrameworkSectionRemix.tsx`
   - `remix-section` - Remix integration section → `docs/src/components/RemixSection.tsx`
   - `compare-section` - Library comparison section → `docs/src/components/CompareSection.tsx`
   - `footer-section` - Footer section → `docs/src/components/FooterSection.tsx`

2. **First analyze the styling approach** of the component:
   - Determine if it uses CSS modules, global CSS, inline styles, etc.
   - Identify the pattern by looking at imports and className usage
   - Follow that same convention for all styling changes

3. **Then modify the component code** based on design goals:
   - Edit the component's TSX/JSX file to change the structure/layout
   - Update CSS styles to change the visual appearance using the same style approach
   - Implement specific changes to address spacing issues, visual balance, etc.
   - Save changes and wait for React to re-render (30-45 seconds)

4. **Then capture the iteration screenshot** with:
   ```bash
   # Capture just one iteration after code modifications
   pnpm docs:design-iterations:count-1 --target="try-jods-section" --prompt="detailed design direction" --skip-other-sections
   ```

5. **Repeat for each unique design** (usually 3-5 iterations):
   - Make different code changes for each iteration
   - Wait for full rebuild between iterations (30-45 seconds minimum)
   - Capture screenshots after each change
   - Track iteration numbers and timestamps

6. **Run these commands for managing iterations**:
   ```bash
   # Check status of iterations
   pnpm docs:design-iterations:status
   
   # Apply the chosen design
   pnpm docs:design-iterations:apply --iteration=N --target="try-jods-section"
   
   # Clean up design artifacts ONLY when explicitly requested
   pnpm docs:design-iterations:cleanup
   ```

7. **<critical> Always provide a structured summary </critical>** to the user about their design iterations:
   ```
   # Design Iterations Summary

   You now have [X] design iterations for the [component] section:

   ## Review Your Designs
   You can find the screenshots at:
   - Light mode: /docs/static/screenshots/unified/[component]-light-[timestamp].png
   - Dark mode: /docs/static/screenshots/unified/[component]-dark-[timestamp].png
   - Iteration folders: /docs/temp/design-iterations/iteration-[N]/screenshots/

   ## Apply Your Preferred Design
   Once you've chosen a design, apply it with:
   ```bash
   pnpm docs:design-iterations:apply --iteration=[N] --target="[component]"
   ```

   ## Clean Up Artifacts
   ONLY after reviewing and applying your chosen design, clean up with:
   ```bash
   pnpm docs:design-iterations:cleanup
   ```
   ```

## Expected Artifacts

Each design iteration generates these artifacts:

1. **Screenshots in two places**:
   - Primary: `docs/static/screenshots/unified/03-try-jods-section-{light|dark}-{timestamp}.png`
   - Backup: `docs/temp/design-iterations/iteration-N/screenshots/`

2. **Debug HTML** (for inspection):
   - `docs/static/debug/03-try-jods-section-{light|dark}-debug.html`

3. **Diff files** (for tracking changes):
   - `docs/temp/design-iterations/iteration-N/diff.patch`
   - `docs/temp/possible-diffs/03-try-jods-section-{timestamp}.diff`

4. **Documentation**:
   - `docs/temp/design-iterations/iteration-N/feedback-template.md`
   - `docs/temp/design-iterations/iteration-N/metadata.json`

## <required> Best Practices </required>

1. **Analyze styling approach first** - Match the component's existing styling convention
2. **Modify component code BEFORE each screenshot** - Make changes first, then capture
3. **Wait 30-45 seconds after code changes** - DocuSaurus needs time to rebuild
4. **Verify changes in browser** - Confirm your design updates are visible before capturing
5. **Use `count-1` for each iteration** - Generate one iteration at a time
6. **Avoid disrupting the development server** - Keep it running between iterations
7. **Always use the `--skip-other-sections` flag** - Focus only on your target
8. **Use simple component names** - Without number prefixes (e.g., `try-jods-section`)
9. **Document your changes** - Fill in the feedback templates
10. **Apply chosen designs** - With `docs:design-iterations:apply`
11. **Preserve artifacts until explicitly requested** - Only clean up when user explicitly asks
12. **Check for CSS module files** - If a component uses CSS modules, check for and modify those files too

## Common Issues and Troubleshooting

- **Identical screenshots across iterations**: 
  - Not waiting long enough between design changes
  - DocuSaurus hasn't rebuilt with your changes yet
  - Try waiting at least 30-45 seconds and verify changes in browser
  
- **No visual changes**: 
  - Did you wait long enough for DocuSaurus to rebuild?
  - Try restarting the dev server with `pnpm start`
  
- **Too many screenshots**: 
  - Make sure to use `--skip-other-sections` flag
  
- **Component not found**: 
  - Check the component name - use simple names without numeric prefixes
  
- **Missing screenshots**: 
  - Ensure the docs site is running with `pnpm start`
  
- **Apply errors**: 
  - Check for uncommitted changes with `git status`
  
- **Styling inconsistencies**:
  - You're using a different styling approach than the component
  - Analyze the imports and className patterns, then follow them

## DocuSaurus Documentation

For more information on the design iterations workflow, see the [official documentation](https://docs.jods.io/design-iterations/workflow):

- **Component Structure**: Each component has a structured naming system and specific selectors
- **Workflow Process**: Step-by-step process from ideation to implementation
- **Best Practices**: Guidelines for effective design iteration
- **Troubleshooting**: Solutions for common issues

@docs/scripts/design-iterations.mjs
@docs/scripts/screenshot-unified.mjs
@docs/docs/design-iterations/index.md 
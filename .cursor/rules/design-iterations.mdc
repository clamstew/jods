---
description: Guidelines for using the design iterations workflow for UI components
globs: ["**/*.{tsx,jsx,js,ts}", "**/*.css", "**/*.md"]
alwaysApply: false
---
# Design Iterations System

## <critical> Process Flow Sequence - Critical </critical>

The design iterations system requires **three separate processes** running in the correct sequence:

1. **Dev Server (Process 1)** - Must be running first
   ```bash
   cd docs
   pnpm dev
   # Verify server is running by visiting http://localhost:3000
   ```

2. **Component Changes (Process 2)** - Must complete and rebuild
   - Make changes to component files (TSX/JSX and CSS)
   - Wait 45-60 seconds for DocuSaurus to fully rebuild
   - Manually verify in browser that changes are visible

3. **Screenshot Capture (Process 3)** - Must wait for Process 2 to complete
   ```bash
   # Only run after confirming changes are visible in browser
   cd docs
   pnpm design-iterations:count-1 --target="03-try-jods-section" --prompt="..." --skip-other-sections
   ```

**COMMON ERRORS:**
- Using the wrong directory: Always `cd docs` first
- Race condition: Running screenshot capture before changes are fully rebuilt
- Background process issues: Not waiting for process completion
- Port conflicts: Multiple dev servers attempting to run

## <critical> Correct Command Sequence </critical>

```bash
# Terminal 1: Start dev server and leave running
cd docs
pnpm dev
# Wait for full initialization, then visit http://localhost:3000

# Terminal 2 (or Cursor terminal): Make component changes
# Edit docs/src/components/YourComponent.tsx
# Edit docs/src/components/YourComponent.module.css

# WAIT 45-60 seconds, then verify changes in browser
# Only after changes are visible:

# Terminal 2: Run single iteration screenshot capture
cd docs
pnpm design-iterations:count-1 --target="03-try-jods-section" --prompt="Your design prompt" --skip-other-sections

# Verify screenshot was captured:
open docs/static/screenshots/unified/03-try-jods-section-light-{timestamp}.png

# Wait for screenshot to complete before making next design change
```

## <critical> Working with Historical Iterations </critical>

The design iterations system creates timestamped artifacts that allow you to reference, review, and apply specific iterations later. Here's how to work with historical iterations effectively:

### Viewing and Finding Iterations

```bash
# View all available iterations with their timestamps
cd docs
pnpm design-iterations:status

# Find all screenshots for a specific component 
find static/screenshots -name "*03-try-jods-section*"

# Find all iterations from a specific date
find static/screenshots -name "*20250507*"

# Find diffs for a component
find temp -name "*diff*" | grep "03-try-jods-section"
```

### Accessing Iteration Artifacts by Timestamp

Once you have a timestamp (format: YYYYMMDDTHHMMSS):

```bash
# View light theme screenshot
open static/screenshots/unified/03-try-jods-section-light-20250507T121424.png

# View dark theme screenshot
open static/screenshots/unified/03-try-jods-section-dark-20250507T121424.png

# View code changes in diff file - IMPORTANT: Always check both component (.tsx/.jsx) and CSS changes
cat temp/possible-diffs/03-try-jods-section-20250507T121424.diff

# To specifically examine component code changes only
grep -A 50 ".tsx\|.jsx" temp/possible-diffs/03-try-jods-section-20250507T121424.diff

# To specifically examine CSS changes only
grep -A 50 ".css" temp/possible-diffs/03-try-jods-section-20250507T121424.diff

# View the feedback template for the iteration
open temp/design-iterations/iteration-N/feedback-template.md
```

### Comparing Iterations

```bash
# Open multiple screenshots side by side
open static/screenshots/unified/03-try-jods-section-light-20250507T121424.png static/screenshots/unified/03-try-jods-section-light-20250507T123056.png

# Compare diffs from different iterations
cat temp/possible-diffs/03-try-jods-section-20250507T121424.diff
cat temp/possible-diffs/03-try-jods-section-20250507T123056.diff
```

### Applying Specific Iterations

```bash
# First, check available iterations
pnpm design-iterations:status

# Then, update the metadata file to approve the desired iteration
# Edit temp/design-iterations/iteration-N/metadata.json
# Change "status" from "pending review" to "approved"

# Finally, apply the approved iteration
pnpm design-iterations:apply --iteration=N --target="03-try-jods-section"
```

### Documenting Iteration History

Create a record of timestamps and iteration features in your notes:

```markdown
## Design Iteration History for Try jods Section

- Iteration 1 (20250507T121424): Initial notebook design with tabs
- Iteration 2 (20250507T123056): Updated with gradient backgrounds
- Iteration 3 (20250507T125201): Refined tab styling and animations
- Iteration 4 (20250507T131045): Final version with dark mode improvements

Selected and applied: Iteration 3 (20250507T125201)
```

## <critical> Screenshot Verification and Context Persistence </critical>

**IMPORTANT**: Each iteration MUST have a unique, verified screenshot. To ensure this:

1. **Visual verification before capture**:
   - After making component changes, ALWAYS wait 45-60 seconds minimum
   - Manually verify in browser that changes are visible before running screenshot command
   - If changes aren't visible, restart the dev server with `pnpm start`

2. **Timestamp all artifacts**:
   - Debug HTML files should include timestamp in filename: `*-debug-{timestamp}.html`
   - Screenshot filenames must contain unique timestamps: `*-{timestamp}.png`
   - Log the timestamp in the iteration metadata for reference

3. **Diff verification**:
   - After each iteration, verify a diff was generated and is substantial
   - Check diff files in `docs/temp/design-iterations/iteration-N/diff.patch`
   - If diff is minimal, your changes may not have been captured properly

4. **Context building**:
   - Document each iteration's key design changes in feedback template
   - Reference previous iterations when describing each new design
   - Create a progression narrative between iterations
   - Tag screenshots with design approach keywords for future reference

5. **Screenshot validation**:
   - After capturing a screenshot, open and visually confirm it shows the new design
   - If screenshot shows previous design, wait longer and retry
   - Compare against previous screenshots to confirm differences

```bash
# After making changes, verify in browser, THEN capture:
pnpm docs:design-iterations:count-1 --target="03-try-jods-section" --prompt="Pink theme with gradient accents" --skip-other-sections

# Immediately verify screenshot shows new design:
open docs/static/screenshots/unified/03-try-jods-section-light-{timestamp}.png
```

## <critical> Server Detection and Persistence </critical>

**IMPORTANT**: If the server detection in the script is taking too long or fails:

1. **Verify server is running manually**:
   ```bash
   # Check if server is responding on port 3000
   curl -I http://localhost:3000
   
   # If successful, you should see "HTTP/1.1 200 OK" in the response
   ```

2. **If script says server isn't running but it is**:
   - Let the script continue - it will proceed with screenshots after timeout
   - Screenshots will still be captured correctly if the server is accessible

3. **If you need to restart the server**:
   ```bash
   # Terminal 1: Kill and restart server
   pkill -f docusaurus
   cd docs && pnpm dev
   
   # Terminal 2: Continue with design iterations after server is confirmed running
   ```

4. **To prevent detection issues**:
   - Always start server in a separate terminal and leave it running
   - Ensure the server is fully initialized before running design iterations
   - Check browser access at http://localhost:3000 to confirm server is responsive

## Key Commands

```bash
# From root directory
pnpm docs:design-iterations:init    # Initialize a new design iteration for a component
pnpm docs:design-iterations:capture # Capture the current state of components
pnpm docs:design-iterations:count-N # Create N iterations (usually use count-1 for step-by-step)
pnpm docs:design-iterations:status  # Check the status of the current iteration
pnpm docs:screenshot:diff           # Compare screenshots using pixel-by-pixel diffing
pnpm docs:verify-changes            # Verify changes were captured correctly
pnpm docs:design-iterations:apply   # Apply a chosen design iteration
pnpm docs:design-iterations:cleanup # Clean up iteration artifacts (ONLY when requested)

# From docs directory
pnpm design-iterations:init         # Initialize a new design iteration
pnpm design-iterations:capture      # Capture the current state
pnpm design-iterations:status       # Check current status
pnpm screenshot:diff                # Compare screenshots
```

## <critical> Multi-State Component Capture </critical>

**IMPORTANT**: When designing components with multiple states or interactive elements (tabs, toggles, dropdowns):

1. **Plan for state capture**:
   - Identify all important states that need visual documentation
   - Create a systematic approach to capture each state

2. **Capture each state separately**:
   ```bash
   # First capture the default/initial state
   pnpm design-iterations:count-1 --target="03-try-jods-section" --prompt="Design with input tab active" --skip-other-sections
   
   # Then adjust the component to show another state (e.g., different tab)
   # Edit the component's state in the .tsx file:
   #   const [activeTab, setActiveTab] = useState("code"); // Instead of "input"
   
   # After verifying the new state appears in browser:
   pnpm design-iterations:count-1 --target="03-try-jods-section" --prompt="Design with code tab active" --skip-other-sections
   ```

3. **Document all states in feedback**:
   - Include screenshots of all captured states
   - Explain the transitions and user flows between states
   - Highlight differences in functionality between states

4. **Naming conventions for multi-state captures**:
   ```
   # Use consistent naming with state identifiers
   "Design v1 - Default State"
   "Design v1 - Expanded State"
   "Design v1 - Active Tab: Code"
   ```

5. **Consider adding visual state indicators** in your component when relevant:
   ```jsx
   {/* Add visual indicator of current state for screenshots */}
   {process.env.NODE_ENV !== 'production' && (
     <div className={styles.stateIndicator}>Current State: {activeTab}</div>
   )}
   ```

## <critical> End of Iteration Review Workflow </critical>

After completing each design iteration, follow these steps to document and review it properly:

1. **Immediately open and verify the screenshot**:
   ```bash
   # View the just-captured screenshot
   open static/screenshots/unified/03-try-jods-section-light-<timestamp>.png
   ```

2. **Record the timestamp in your notes**:
   ```
   Latest iteration captured at: 20250507T121424
   ```

3. **Examine the code changes in the diff file**:
   ```bash
   # View what code changes were made
   cat temp/possible-diffs/03-try-jods-section-<timestamp>.diff
   ```

4. **Update the feedback template**:
   ```bash
   # Document your observations
   open temp/design-iterations/iteration-N/feedback-template.md
   ```

5. **Create a design history log** to track all iterations:
   ```markdown
   ## Design Timeline
   
   | Iteration | Timestamp      | Key Changes          | Status      |
   |-----------|----------------|----------------------|-------------|
   | 1         | 20250507T121424| Initial tabbed design| Reviewed    |
   | 2         | 20250507T123056| Gradient backgrounds | Approved    |
   | 3         | 20250507T125201| Refined animations   | Applied     |
   ```

This documentation approach makes it easier to revisit previous designs when needed and provides a clear history of your design process.

## Quick Start

```bash
# Generate design iterations for a specific target only
pnpm docs:design-iterations:count-5 --target="04-framework-section-react" --prompt="Reimagine with bold visual hierarchy" --skip-other-sections
```

## <critical> Proper Workflow Sequence </critical>

**CRITICAL**: Follow this sequence exactly to ensure each iteration captures distinct designs:

1. **Modify component code** - Make your design changes to both TSX/JSX and CSS files
2. **Save changes** - Ensure all files are saved
3. **Wait for rebuild** - Allow 45-60 seconds for DocuSaurus to fully rebuild
4. **Verify changes in browser** - Manually confirm your design changes are visible
5. **Capture ONE iteration** - Run the screenshot command for just this iteration
6. **Verify screenshot** - Open and confirm the screenshot shows your new design
7. **Document context** - Add detailed notes to the feedback template
8. **Make new changes** - Create a different design for the next iteration
9. **Repeat steps 2-8** - Follow the same sequence for each iteration

```bash
# CORRECT: One iteration at a time with verification between each
# First modify component code, save, wait 45-60 seconds, verify in browser, then:
pnpm docs:design-iterations:count-1 --target="04-framework-section-react" --skip-other-sections

# After capturing, verify screenshot and document context:
open docs/static/screenshots/unified/04-framework-section-react-light-{timestamp}.png
edit docs/temp/design-iterations/iteration-N/feedback-template.md

# INCORRECT: Running multiple iterations without verification
pnpm docs:design-iterations:count-3 --target="04-framework-section-react" --skip-other-sections
```

## <required> Artifact Preservation </required>

**IMPORTANT**: Do NOT clean up design iteration artifacts until explicitly requested by the user. Artifacts are essential for:

1. **Design review** - Comparing multiple design approaches
2. **Feedback collection** - Adding notes to feedback templates
3. **Iteration refinement** - Using previous designs as reference
4. **Final application** - Selecting the best design to apply

Only run cleanup after the user has:
1. Reviewed all design iterations
2. Applied their chosen design
3. Explicitly requested cleanup with `pnpm docs:design-iterations:cleanup`

The agent CANNOT know when the user is done reviewing design iterations. Premature cleanup could cause loss of valuable information. Cleanup should ONLY happen when explicitly requested, not automatically.

## <required> Metadata and Feedback Management </required>

**IMPORTANT**: Each design iteration should have its own metadata and feedback artifacts:

1. **Timestamp-based organization**:
   - All artifacts should be organized by their capture timestamp
   - Example: `docs/temp/design-iterations/iteration-1/20250507T121055/`

2. **Essential artifacts for each iteration**:
   ```
   docs/temp/design-iterations/iteration-N/{timestamp}/
   ├── screenshots/
   │   ├── 03-try-jods-section-light-{timestamp}.png
   │   └── 03-try-jods-section-dark-{timestamp}.png
   ├── diff.patch
   ├── feedback-template.md
   └── metadata.json
   ```

3. **Metadata structure** must include:
   ```json
   {
     "iteration": N,
     "timestamp": "{timestamp}",
     "target": "03-try-jods-section",
     "prompt": "Design description",
     "screenshots": [
       "03-try-jods-section-light-{timestamp}.png",
       "03-try-jods-section-dark-{timestamp}.png"
     ],
     "diff_path": "docs/temp/possible-diffs/03-try-jods-section-{timestamp}.diff",
     "status": "pending review",
     "states_captured": ["default", "expanded"]  // For multi-state components
   }
   ```

4. **If artifacts are overwritten**:
   - Keep manual backups with timestamp in filename
   - Create duplicate feedback templates for each distinct timestamp
   - Report the issue with details about what's being overwritten

## Styling Approach: Follow Component Conventions

**IMPORTANT**: Always match the existing styling conventions of the component:

1. **First analyze the component** to determine its styling approach:
   - Check imports at the top for CSS/SCSS module imports
   - Look for className references that use imported styles
   - Notice any CSS-in-JS patterns or inline styles

2. **Common styling approaches**:
   - **CSS Modules**: `import styles from './Component.module.css'` → Use `className={styles.element}`
   - **Global CSS**: `import './Component.css'` → Use `className="element"`
   - **CSS-in-JS**: Look for styled-components or emotion usage
   - **Tailwind**: Look for utility class patterns like `className="flex items-center"`

3. **Examples of following conventions**:

```tsx
// If the component uses CSS modules:
import styles from './InteractiveDemo.module.css';
// ...
<div className={styles.demoContainer}>

// If the component uses global CSS:
import './InteractiveDemo.css';
// ...
<div className="demo-container">

// If the component uses inline styles:
<div style={{ display: 'flex', gap: '1rem' }}>
```

## <required> Component Code Updates Required </required>

For each design iteration, you MUST modify the component code BEFORE taking screenshots:

1. **Step 1: Edit the component code directly** - Before generating the screenshot for each iteration, modify the component's TSX/JSX and CSS code according to the design prompt
2. **Step 2: Wait for changes to apply** - Allow sufficient time (45-60 seconds) for DocuSaurus to rebuild with the new changes
3. **Step 3: Verify in browser** - ALWAYS confirm changes are visible before proceeding
4. **Step 4: Then run the screenshot command** - Each iteration should capture a visually distinct design
5. **Step 5: Verify screenshot** - Open and confirm the screenshot shows your new design

Example workflow:
```bash
# First modify the component code (edit both TSX and CSS files if needed)
# Edit src/components/InteractiveDemo.tsx
# Edit src/components/InteractiveDemo.module.css (if the component uses CSS modules)

# After saving changes, wait 45-60 seconds, verify in browser, then run:
pnpm docs:design-iterations:count-1 --target="04-framework-section-react" --skip-other-sections

# Verify the screenshot captured your changes:
open docs/static/screenshots/unified/04-framework-section-react-light-{timestamp}.png

# Then modify the component code differently
# After saving changes, wait 45-60 seconds, verify in browser, then run:
pnpm docs:design-iterations:count-1 --target="04-framework-section-react" --skip-other-sections

# Repeat verification for each screenshot
open docs/static/screenshots/unified/04-framework-section-react-light-{timestamp}.png

# Repeat for each unique design iteration
```

## <required> Building Context Between Iterations </required>

For each iteration, maintain context by:

1. **Creating descriptive prompts**:
```bash
pnpm docs:design-iterations:count-1 --target="03-try-jods-section" --prompt="Pink theme with curved borders and gradient accents" --skip-other-sections
```

2. **Documenting changes in feedback templates**:
```markdown
# Iteration 2: Pink Theme with Gradients

## Design Approach
- Implemented a vibrant pink color scheme (#FF5CAD) with purple accents
- Added subtle gradient backgrounds transitioning from pink to purple
- Curved all container borders to 12px radius
- Applied animation to code examples on hover

## Comparison to Previous
- More vibrant and playful than Iteration 1's minimal design
- Added visual hierarchy with gradient backgrounds
- Enhanced interactive elements with hover animations

## Timestamp: 2023-11-16T14:32:15
```

3. **Enhanced metadata**:
```json
{
  "iteration": 2,
  "timestamp": "2023-11-16T14:32:15",
  "target": "03-try-jods-section",
  "design_approach": "Pink theme with gradients",
  "key_changes": ["color scheme", "gradients", "animations"],
  "screenshot_path": "docs/static/screenshots/unified/03-try-jods-section-light-20231116143215.png",
  "diff_path": "docs/temp/design-iterations/iteration-2/diff.patch",
  "debug_html_path": "docs/static/debug/03-try-jods-section-light-debug-20231116143215.html"
}
```

## <critical> Important: Component Name Formats </critical>

**CRITICAL**: Always use the numbered format for component target names in screenshot commands:

```bash
# CORRECT - Use the numbered prefix format:
pnpm docs:design-iterations:count-5 --target="04-framework-section-react" --skip-other-sections

# INCORRECT - Simple names without the numbered prefix may not work properly:
pnpm docs:design-iterations:count-5 --target="framework-section-react" --skip-other-sections
```

Available component names with required numbered prefixes:
- `01-hero-section` (NOT just "hero-section")
- `02-features-section` (NOT just "features-section")
- `03-try-jods-section` (NOT just "try-jods-section")
- `04-framework-section-react` (NOT just "framework-section-react")
- `04-framework-section-remix` (NOT just "framework-section-remix")
- `05-remix-section` (NOT just "remix-section")
- `06-compare-section` (NOT just "compare-section")
- `07-footer-section` (NOT just "footer-section")

## <required> Important: Using --skip-other-sections Flag </required>

The `--skip-other-sections` flag is **crucial** when you want to focus on a single component without affecting or capturing other sections:

```bash
# CORRECT: Focus ONLY on the specified target
pnpm docs:design-iterations:count-5 --target="04-framework-section-react" --skip-other-sections

# INCORRECT: Will generate screenshots for ALL sections
pnpm docs:design-iterations:count-5 --target="04-framework-section-react"
```

This is essential to avoid the workflow generating unnecessary files for sections you're not changing.

## Component Targeting

Components can be targeted by:

1. **Data Test ID** (preferred)
   ```jsx
   <section data-testid="try-jods-section">...</section>
   ```

2. **CSS Selectors**
   ```js
   selector: ".try-jods-container"
   ```

3. **Alternative Selectors** for complex components
   ```js
   alternativeSelectors: ["h2:has-text('Try jods')", ".try-jods-demo"]
   ```

## Screenshot System

The screenshot system uses Playwright to:

1. Launch a headless browser
2. Navigate to pages with components
3. Capture screenshots in different themes
4. Support various component types (sections, examples, etc.)
5. Perform pixel-by-pixel comparison to identify visual changes
6. Generate diff images for visual inspection

## <critical> Troubleshooting Guide </critical>

**Screenshot not showing changes:**
- The most common issue is a race condition - the screenshot was taken before changes fully rebuilt
- Solution: Wait longer between making changes and running screenshot command (60+ seconds)
- Manually verify in browser before running screenshot command

**Command hangs indefinitely:**
- Process is waiting for server to be available
- Solution: Start the dev server in a separate terminal first with `cd docs && pnpm dev`
- Kill hanging process with Ctrl+C and try again after server is fully running

**Multiple iterations with same content:**
- Changes weren't rebuilt between iterations
- Solution: Only run one iteration at a time, verify changes in browser before each capture

**Process runs but no screenshots are created:**
- Check if there are errors in the terminal output
- Verify the target component name is correct
- Check data-testid attribute in component matches target name

## <required> Multiple Iterations Workflow </required>

For multiple iterations, repeat this sequence for each one:

1. **Edit component files** - Make your design changes
2. **Wait for rebuild** - Allow 45-60 seconds minimum
3. **Verify in browser** - Confirm your design changes are visible
4. **Capture ONE iteration** - Run the screenshot command
5. **Verify screenshot** - Open and confirm the screenshot shows your new design
6. **Document changes** - Update the feedback template with design notes
7. **Make new changes** - Create a different design for the next iteration
8. **Repeat steps 2-7** - Follow the same sequence for each iteration

**NEVER run `count-5` directly** (this will create multiple iterations without proper verification between each) 
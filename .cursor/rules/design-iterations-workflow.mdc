---
description: Comprehensive guidelines for the design iterations workflow for UI components
globs: ["**/*.{tsx,jsx,js,ts}", "**/*.css", "**/*.md"]
alwaysApply: false
---
# Design Iterations Workflow

## <critical> Process Flow Sequence - Critical </critical>

The design iterations system requires **three separate processes** running in the correct sequence:

1. **Dev Server (Process 1)** - Must be running first
   ```bash
   cd docs
   pnpm dev
   # Verify server is running by visiting http://localhost:3000
   ```

2. **Component Changes (Process 2)** - Must complete and rebuild
   - Make changes to component files (TSX/JSX and CSS)
   - Wait until changes are visible in browser (may take a minute or more)
   - Manually verify in browser that changes are visible

3. **Screenshot Capture (Process 3)** - Must wait for Process 2 to complete
   ```bash
   # Only run after confirming changes are visible in browser
   cd docs
   pnpm design-iterations:count-1 --target="03-try-jods-section" --prompt="..." --skip-other-sections
   ```

**COMMON ERRORS:**
- Using the wrong directory: Always `cd docs` first
- Race condition: Running screenshot capture before changes are fully rebuilt
- Background process issues: Not waiting for process completion
- Port conflicts: Multiple dev servers attempting to run

## <critical> Component + CSS Coordination</critical>

**CRITICAL**: When implementing design iterations, you must modify both the component file (TSX/JSX) and the CSS file together:

1. **Coordinated Updates**:
   - Component and CSS changes must be synchronized for proper visual rendering
   - Styling class names in component must match the CSS declarations
   - Removal of UI elements from components requires removal of corresponding CSS

2. **Fix Linter Errors immediately**:
   - After applying a design iteration, check for linter errors
   - Common issues include unused variables after UI changes
   - Example: removing a tab interface but leaving tab state variables

3. **Variable Cleanup Workflow**:
   ```jsx
   // BEFORE: Component with tabs that will be removed
   const [activeTab, setActiveTab] = useState("input");
   const jsonView = JSON.stringify(snapshot, null, 2);
   
   // AFTER: When replacing tabs with another UI
   // 1. Remove or update the state variables
   // 2. Remove any unused variables like jsonView
   // 3. Fix any code that depends on the removed state
   ```

4. **Check for Rendering Errors**:
   - After applying changes, verify the component renders correctly
   - Watch for React errors in the console
   - Fix any broken rendering due to removed UI elements

## <critical> Correct Command Sequence </critical>

```bash
# Terminal 1: Start dev server and leave running
cd docs
pnpm dev
# Wait for full initialization, then visit http://localhost:3000

# Terminal 2 (or Cursor terminal): Make component changes
# Edit docs/src/components/YourComponent.tsx
# Edit docs/src/components/YourComponent.module.css

# WAIT until changes are visible in browser
# Only after changes are visible:

# Terminal 2: Run single iteration screenshot capture
cd docs
pnpm design-iterations:count-1 --target="03-try-jods-section" --prompt="Your design prompt" --skip-other-sections

# Verify screenshot was captured:
open docs/static/screenshots/unified/03-try-jods-section-light-{timestamp}.png

# Wait for screenshot to complete before making next design change
```

## <critical> Working with Historical Design Iterations </critical>

After you've created multiple design iterations, you'll need to reference them by their timestamps and be able to view, compare, and potentially apply specific iterations. Here's how to work with historical iterations:

### Viewing Available Iterations

First, check all available iterations:

```bash
# View all iterations and their timestamps
cd docs
pnpm design-iterations:status
```

This will show a list of iterations with their timestamps (format: YYYYMMDDTHHMMSS).

### Accessing Iteration Artifacts by Timestamp

Once you have the timestamp for a specific iteration, you can view its screenshots:

```bash
# Light theme screenshot
open docs/static/screenshots/unified/03-try-jods-section-light-20250507T121424.png

# Dark theme screenshot (if available)
open docs/static/screenshots/unified/03-try-jods-section-dark-20250507T121424.png

# Find all screenshots for a specific iteration by timestamp
find docs/static/screenshots -name "*20250507T121424*"
```

### Viewing Iteration Code Changes

**IMPORTANT**: Always examine BOTH component code (TSX/JSX) and CSS files when reviewing iterations:

```bash
# View the complete diff showing ALL file changes (TSX and CSS)
cat docs/temp/possible-diffs/03-try-jods-section-20250507T121424.diff

# To specifically see TSX/JSX component changes
grep -A 50 ".tsx\|.jsx" docs/temp/possible-diffs/03-try-jods-section-20250507T121424.diff

# To specifically see CSS changes  
grep -A 50 ".css" docs/temp/possible-diffs/03-try-jods-section-20250507T121424.diff

# Find all available diffs
find docs/temp -name "*diff*" | grep "03-try-jods-section"
```

Diffs contain the exact code changes between the base version and the iteration, showing you precisely what was modified in the component files.

### Reviewing Iteration Feedback and Metadata

Each iteration has associated metadata and feedback templates:

```bash
# View feedback template for a specific iteration
open docs/temp/design-iterations/iteration-N/feedback-template.md

# View metadata for a specific iteration
cat docs/temp/design-iterations/iteration-N/metadata.json
```

### Applying a Specific Historical Iteration

To apply a specific historical iteration by its iteration number:

```bash
# First, ensure the iteration is approved in its metadata.json
# Then apply it:
pnpm design-iterations:apply --iteration=N --target="03-try-jods-section"
```

### Comparing Multiple Iterations

To compare multiple iterations visually:

```bash
# Open multiple screenshots side by side
open docs/static/screenshots/unified/03-try-jods-section-light-20250507T121424.png docs/static/screenshots/unified/03-try-jods-section-light-20250507T123056.png

# Compare diffs from different iterations (manual inspection)
cat docs/temp/possible-diffs/03-try-jods-section-20250507T121424.diff
cat docs/temp/possible-diffs/03-try-jods-section-20250507T123056.diff
```

### Searching for Iterations by Component or Timestamp

Find all iterations for a specific component or timestamp pattern:

```bash
# Find all screenshots for a specific component
find docs/static/screenshots -name "*03-try-jods-section*"

# Find all iterations from a specific date
find docs/static/screenshots -name "*20250507*"

# Find all diffs for a specific component
find docs/temp -name "*diff*" | grep "03-try-jods-section"
```

### Documenting Iteration History

When working through multiple iterations, document the timestamp and key features of each in your notes:

```markdown
## Design Iteration History

- Iteration 1 (20250507T121424): Initial notebook design with tabs
- Iteration 2 (20250507T123056): Updated with gradient backgrounds
- Iteration 3 (20250507T125201): Refined tab styling and animations
- Iteration 4 (20250507T131045): Final version with dark mode improvements

Selected iteration: 3 (20250507T125201)
```

This approach creates a clear record of your design process and makes it easy to reference specific iterations.

## <critical> Capturing Alternative States </critical>

For components with important state variations, like interactive elements or components with tabs/buttons, follow this workflow:

1. **Primary State Screenshot**:
   - First, capture the default/main view of the component
   - Use the standard design iterations command:
   ```bash
   cd docs
   pnpm design-iterations:count-1 --target="03-try-jods-section" --prompt="Default state design" --skip-other-sections
   ```

2. **Interacting with the Component**:
   - After capturing the default state, interact with the component in the browser
   - Click tabs, buttons, or form elements
   - Expand collapsed sections
   - This changes the visual state of the component

3. **Capturing Alternative States**:
   - After interacting with the component, capture a new screenshot with a new design iteration
   ```bash
   pnpm design-iterations:count-1 --target="03-try-jods-section" --prompt="After clicking tab 2" --skip-other-sections
   ```
   - This creates a new screenshot with a new timestamp
   - You can optionally rename for clarity:
   ```bash
   mv docs/static/screenshots/unified/03-try-jods-section-light-20250507T121555.png \
      docs/static/screenshots/unified/03-try-jods-section-light-tab2-active-20250507T121555.png
   ```

4. **Documenting State Transitions**:
   - In your feedback template, document what interactions trigger each state
   - Note which user actions change the component appearance
   - Link the timestamp to the specific interaction

For complex components like the "Try jods" section with multiple tabs or interactive elements:
- Capture separate screenshots for each major state (e.g., different tabs)
- Document the user flows that trigger these state changes
- Use descriptive naming to indicate the state in file names

This approach ensures you have a complete record of how the component behaves in all its visual states, which is essential for interactive components.

## <critical> Integration Testing After Choosing Design </critical>

After applying your chosen design iteration, perform these verification steps:

1. **Linter Error Check**:
   - Check for any linter errors introduced by the changes
   - Fix obvious issues like unused variables or imports

2. **Browser Testing**:
   - Test the component in both light and dark modes
   - Verify elements that affect displayed content work properly
   - Check responsiveness at different viewport sizes

3. **Functionality Expectations**:
   - Early iterations (1-5): Incomplete functionality is acceptable
   - Later refinement: Build out interactive elements more thoroughly
   - Final iteration: Ensure critical interactive elements work properly

4. **Console Error Check**:
   - Open browser console and check for React errors or warnings
   - Fix any issues before committing changes

## <critical> Common Issues & Solutions </critical>

1. **Server Already Running**
   - Error: `Something is already running on port 3000`
   - Solution: 
     - Say Yes to use a different port, OR
     - Kill existing process: `pkill -f docusaurus`
   - **Server Detection Issue**: If the script says "Docs server not running" but it is running:
     - Try manually verifying with `curl http://localhost:3000` to check connectivity
     - If the script hangs on server detection despite server running, proceed with the workflow. The screenshot will still be captured correctly if the server is accessible.

2. **Missing Script**
   - Error: `ERR_PNPM_NO_SCRIPT_OR_SERVER Missing script start`
   - Solution: You're in wrong directory, run `cd docs` first

3. **Not Finding Component**
   - Error: Component not found or blank screenshots
   - Solution: 
     - Use correct numbered format for target: `03-try-jods-section` (not just "try-jods-section")
     - Verify data-testid matches in component: `data-testid="03-try-jods-section"`

4. **Background Process Issues**
   - Error: Command appears to hang or is interrupted
   - Solution:
     - Use separate terminals for dev server and design iteration commands
     - Don't background processes that need to complete sequentially
     - Wait for each process to fully complete before starting next

5. **Changes Not Showing**
   - Issue: Browser doesn't reflect component changes
   - Solution:
     - Wait longer for DocuSaurus to rebuild (may take a minute or more)
     - Force refresh browser with Ctrl+Shift+R
     - Check console for build errors
     - Restart dev server if needed

6. **Linter Errors After Applying Iteration**:
   - Issue: Unused variables or imports after changing UI
   - Solution:
     - Review the component for any removed UI elements
     - Clean up associated state variables and unused functions
     - Example: `<div className={styles.notebookContainer}>` was replaced but the `notebookContainer` class may still exist in CSS
     - Example: `const [activeTab, setActiveTab]` may no longer be needed

## <required> Waiting Periods & Verification </required>

**NEVER skip these verification steps:**

1. **After starting dev server:** Wait until the terminal shows "Compiled successfully" and you can load http://localhost:3000

2. **After making component changes:** Wait until changes are visible in browser, then verify manually before proceeding

3. **After capturing screenshot:** Verify the screenshot was created and shows your new design:
   ```bash
   open docs/static/screenshots/unified/03-try-jods-section-light-{timestamp}.png
   ```

4. **Between iterations:** Complete the entire sequence for one iteration before starting the next:
   - Make component changes
   - Wait for changes to appear in browser
   - Verify in browser
   - Capture screenshot
   - Verify screenshot shows new design

## <required> Component Testing </required>

Each component should have a proper `data-testid` attribute that matches the target name:

```jsx
<section
  className={styles.sectionContainer}
  id="try-jods-live"
  data-testid="03-try-jods-section"
>
```

**Available Component Names:**
- `01-hero-section` (NOT just "hero-section")
- `02-features-section` (NOT just "features-section")
- `03-try-jods-section` (NOT just "try-jods-section")
- `04-framework-section-react` (NOT just "framework-section-react")
- `04-framework-section-remix` (NOT just "framework-section-remix")
- `05-remix-section` (NOT just "remix-section")
- `06-compare-section` (NOT just "compare-section")
- `07-footer-section` (NOT just "footer-section")

## Design Iteration Commands

```bash
# Create a single design iteration
pnpm design-iterations:count-1 --target="03-try-jods-section" --prompt="Your design description" --skip-other-sections

# Check status of design iterations
pnpm design-iterations:status

# Apply a specific design iteration
pnpm design-iterations:apply --iteration=2 --target="03-try-jods-section"

# Clean up iteration artifacts (ONLY when explicitly requested)
pnpm design-iterations:cleanup
```

## <required> End of Iteration Run: Review and Next Steps </required>

After completing a design iteration run, follow these steps to properly review and document your work:

1. **Review screenshots immediately**:
   ```bash
   # Open the most recent screenshot
   open docs/static/screenshots/unified/03-try-jods-section-light-<timestamp>.png
   ```

2. **Document the timestamp in your notes** for future reference:
   ```
   Iteration 3 completed at timestamp: 20250507T131045
   ```

3. **Review the code changes in the diff file**:
   ```bash
   # View the diff for the latest iteration
   cat docs/temp/possible-diffs/03-try-jods-section-<timestamp>.diff
   ```

4. **Update the feedback template with your observations**:
   ```bash
   # Open the feedback template
   open docs/temp/design-iterations/iteration-N/feedback-template.md
   ```

5. **Before starting a new iteration, document what you learned** and what changes you plan to make next.

6. **If this is your final iteration:**
   - Decide which iteration to apply based on your reviews
   - Mark it as "approved" in the metadata
   - Apply the chosen iteration using the apply command

Remember that each timestamp uniquely identifies a design snapshot, making it easy to refer back to specific versions of your component design. 
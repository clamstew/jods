"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4263],{3774:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6672);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},7165:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"time-travel-debugging","title":"\ud83d\udd70\ufe0f Time-Travel Debugging with jods","description":"jods provides a powerful time-travel debugging capability through the history() function, allowing you to track changes to your store and move back and forth through its state history.","source":"@site/docs/time-travel-debugging.md","sourceDirName":".","slug":"/time-travel-debugging","permalink":"/time-travel-debugging","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/time-travel-debugging.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"jodsSidebar","previous":{"title":"\ud83d\udca1 Examples","permalink":"/examples"},"next":{"title":"\ud83d\udd70\ufe0f Time-Travel Debugging (Old)","permalink":"/time-travel-debugging-old"}}');var o=t(3420),s=t(3774);const i={sidebar_position:5},a="\ud83d\udd70\ufe0f Time-Travel Debugging with jods",c={},l=[{value:"\ud83d\udd0d Understanding Time-Travel Debugging",id:"-understanding-time-travel-debugging",level:2},{value:"\ud83d\udee0\ufe0f Basic Usage",id:"\ufe0f-basic-usage",level:2},{value:"\ud83d\udcdd Creating a History Tracker",id:"-creating-a-history-tracker",level:3},{value:"\u23f3 Traveling Through Time",id:"-traveling-through-time",level:3},{value:"\ud83c\udf10 API Reference",id:"-api-reference",level:2},{value:"\ud83d\udd04 <code>history(store, options?)</code>",id:"-historystore-options",level:3},{value:"\u2699\ufe0f Options",id:"\ufe0f-options",level:4},{value:"\ud83d\udcca Return Value",id:"-return-value",level:4},{value:"\ud83d\udca1 Advanced Examples",id:"-advanced-examples",level:2},{value:"\ud83d\udccf Limiting History Size",id:"-limiting-history-size",level:3},{value:"\ud83d\udd8a\ufe0f Manual Recording",id:"\ufe0f-manual-recording",level:3},{value:"\u21a9\ufe0f Creating an Undo/Redo Feature",id:"\ufe0f-creating-an-undoredo-feature",level:3},{value:"\ud83d\udd04 How It Works",id:"-how-it-works",level:2},{value:"\ud83e\udde0 Best Practices",id:"-best-practices",level:2},{value:"\ud83d\udcbe Memory Considerations",id:"-memory-considerations",level:3},{value:"\ud83e\udde9 Complex State",id:"-complex-state",level:3},{value:"\ud83e\uddf0 Framework Integration",id:"-framework-integration",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"\ufe0f-time-travel-debugging-with-jods",children:"\ud83d\udd70\ufe0f Time-Travel Debugging with jods"})}),"\n",(0,o.jsxs)(n.p,{children:["jods provides a powerful time-travel debugging capability through the ",(0,o.jsx)(n.code,{children:"history()"})," function, allowing you to track changes to your store and move back and forth through its state history."]}),"\n",(0,o.jsx)(n.h2,{id:"-understanding-time-travel-debugging",children:"\ud83d\udd0d Understanding Time-Travel Debugging"}),"\n",(0,o.jsx)(n.p,{children:"Time-travel debugging lets you:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Record all state changes over time"}),"\n",(0,o.jsx)(n.li,{children:"View a complete state history"}),"\n",(0,o.jsx)(n.li,{children:"Jump backward or forward to any recorded state"}),"\n",(0,o.jsx)(n.li,{children:"Understand what changed between states"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This is particularly valuable for:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Debugging complex state transitions"}),"\n",(0,o.jsx)(n.li,{children:"Implementing undo/redo functionality"}),"\n",(0,o.jsx)(n.li,{children:"Tracking user interactions"}),"\n",(0,o.jsx)(n.li,{children:"Understanding the sequence of events in your application"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-basic-usage",children:"\ud83d\udee0\ufe0f Basic Usage"}),"\n",(0,o.jsx)(n.h3,{id:"-creating-a-history-tracker",children:"\ud83d\udcdd Creating a History Tracker"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { store, history } from "jods";\n\n// Create a store\nconst counter = store({ count: 0 });\n\n// Add history tracking\nconst counterHistory = history(counter);\n\n// Make some changes\ncounter.count = 1;\ncounter.count = 2;\ncounter.count = 3;\n\n// View current history state\nconsole.log(counterHistory.currentIndex); // 3 (after three changes)\nconsole.log(counterHistory.states.length); // 4 (initial + 3 changes)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-traveling-through-time",children:"\u23f3 Traveling Through Time"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// Jump back to initial state\ncounterHistory.travelTo(0);\nconsole.log(counter.count); // 0\n\n// Move forward one step\ncounterHistory.forward();\nconsole.log(counter.count); // 1\n\n// Jump to the latest state\ncounterHistory.latest();\nconsole.log(counter.count); // 3\n\n// Go back one step\ncounterHistory.back();\nconsole.log(counter.count); // 2\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-api-reference",children:"\ud83c\udf10 API Reference"}),"\n",(0,o.jsxs)(n.p,{children:["For the complete jods API documentation, see the ",(0,o.jsx)(n.a,{href:"/api/overview",children:"\ud83d\udcda API Reference"}),"."]}),"\n",(0,o.jsxs)(n.h3,{id:"-historystore-options",children:["\ud83d\udd04 ",(0,o.jsx)(n.code,{children:"history(store, options?)"})]}),"\n",(0,o.jsx)(n.p,{children:"Creates a history tracker for the given store."}),"\n",(0,o.jsx)(n.h4,{id:"\ufe0f-options",children:"\u2699\ufe0f Options"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"interface HistoryOptions {\n  maxSize?: number; // Maximum number of states to keep (default: Infinity)\n  autoRecord?: boolean; // Whether to automatically record state changes (default: true)\n}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"-return-value",children:"\ud83d\udcca Return Value"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"interface HistoryTracker<T> {\n  states: T[]; // Array of recorded states\n  currentIndex: number; // Current position in history\n\n  record(): void; // Record current state\n  latest(): void; // Go to most recent state\n  travelTo(index: number): void; // Jump to specific index\n  back(): boolean; // Go back one step (returns false if at beginning)\n  forward(): boolean; // Go forward one step (returns false if at end)\n  clear(): void; // Clear history\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-advanced-examples",children:"\ud83d\udca1 Advanced Examples"}),"\n",(0,o.jsx)(n.h3,{id:"-limiting-history-size",children:"\ud83d\udccf Limiting History Size"}),"\n",(0,o.jsx)(n.p,{children:"For performance reasons, you might want to limit the number of states stored:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { store, history } from "jods";\n\nconst bigStore = store({\n  /* lots of data */\n});\nconst limitedHistory = history(bigStore, { maxSize: 50 });\n\n// Only the last 50 states will be kept\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\ufe0f-manual-recording",children:"\ud83d\udd8a\ufe0f Manual Recording"}),"\n",(0,o.jsx)(n.p,{children:"By default, all changes are recorded automatically. For more control, you can disable auto-recording:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { store, history } from "jods";\n\nconst userStore = store({ name: "", email: "" });\nconst userHistory = history(userStore, { autoRecord: false });\n\n// Make some temporary changes\nuserStore.name = "typing...";\nuserStore.email = "still...";\n\n// Only record when you want\nuserStore.name = "Final Name";\nuserStore.email = "final@email.com";\nuserHistory.record(); // Now this state is recorded\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\ufe0f-creating-an-undoredo-feature",children:"\u21a9\ufe0f Creating an Undo/Redo Feature"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { store, history } from "jods";\nimport { useState } from "react";\n\n// Set up store and history\nconst documentStore = store({ text: "" });\nconst docHistory = history(documentStore);\n\nfunction TextEditor() {\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  // Update UI controls when history changes\n  useEffect(() => {\n    const updateButtons = () => {\n      setCanUndo(docHistory.currentIndex > 0);\n      setCanRedo(docHistory.currentIndex < docHistory.states.length - 1);\n    };\n\n    // Subscribe to store changes\n    const unsubscribe = onUpdate(documentStore, updateButtons);\n    updateButtons();\n\n    return unsubscribe;\n  }, []);\n\n  return (\n    <div>\n      <textarea\n        value={documentStore.text}\n        onChange={(e) => {\n          documentStore.text = e.target.value;\n        }}\n      />\n      <div>\n        <button disabled={!canUndo} onClick={() => docHistory.back()}>\n          Undo\n        </button>\n        <button disabled={!canRedo} onClick={() => docHistory.forward()}>\n          Redo\n        </button>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-how-it-works",children:"\ud83d\udd04 How It Works"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"history()"})," function creates a wrapper around your store that:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Captures the initial state of the store"}),"\n",(0,o.jsxs)(n.li,{children:["Subscribes to store changes through ",(0,o.jsx)(n.code,{children:"onUpdate()"})]}),"\n",(0,o.jsx)(n.li,{children:"Creates a deep clone of each state when a change occurs"}),"\n",(0,o.jsx)(n.li,{children:"Maintains an array of these state snapshots"}),"\n",(0,o.jsx)(n.li,{children:"Updates the store with the appropriate state when time-traveling"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This approach ensures that you always have accurate snapshots without modifying how you interact with your store normally."}),"\n",(0,o.jsx)(n.h2,{id:"-best-practices",children:"\ud83e\udde0 Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"-memory-considerations",children:"\ud83d\udcbe Memory Considerations"}),"\n",(0,o.jsx)(n.p,{children:"Because history keeps a complete copy of the store for each state, it can consume significant memory for large stores or many changes. Consider:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Using the ",(0,o.jsx)(n.code,{children:"maxSize"})," option to limit history length"]}),"\n",(0,o.jsx)(n.li,{children:"Applying history selectively to smaller, focused stores"}),"\n",(0,o.jsx)(n.li,{children:"Using manual recording for precise control"}),"\n",(0,o.jsxs)(n.li,{children:["Clearing history when no longer needed with ",(0,o.jsx)(n.code,{children:"historyTracker.clear()"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"-complex-state",children:"\ud83e\udde9 Complex State"}),"\n",(0,o.jsx)(n.p,{children:"For stores with computed values or nested structures, time-travel works seamlessly:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { store, computed, history, json } from "jods";\n\nconst userData = store({\n  firstName: "Ada",\n  lastName: "Lovelace",\n  visits: 0,\n});\n\n// Add a computed property\nuserData.fullName = computed(\n  () => `${userData.firstName} ${userData.lastName}`\n);\n\nconst userHistory = history(userData);\n\n// Make changes\nuserData.visits = 1;\nuserData.lastName = "Byron";\n\n// Travel back to original state\nuserHistory.travelTo(0);\nconsole.log(json(userData));\n// { firstName: "Ada", lastName: "Lovelace", visits: 0, fullName: "Ada Lovelace" }\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-framework-integration",children:"\ud83e\uddf0 Framework Integration"}),"\n",(0,o.jsx)(n.p,{children:"Time-travel debugging works with any framework integration:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import { store, history } from "jods";\nimport { useJods } from "jods/react";\n\nconst counterStore = store({ count: 0 });\nexport const counterHistory = history(counterStore);\n\nfunction Counter() {\n  const counter = useJods(counterStore);\n\n  return (\n    <div>\n      <p>Count: {counter.count}</p>\n      <button\n        onClick={() => {\n          counter.count++;\n        }}\n      >\n        Increment\n      </button>\n      <button onClick={() => counterHistory.back()}>Undo</button>\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Embrace the power of time-travel debugging with jods, and experience a new level of control and understanding over your application state! \ud83d\udd70\ufe0f \ud83d\udc3f\ufe0f \ud83e\udd86"})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);
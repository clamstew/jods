"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1864],{3774:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(6672);const o={},a=s.createContext(o);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},8520:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"examples","title":"\ud83d\udcda Examples \ud83d\udca1 \ud83d\udc3f\ufe0f \ud83e\udd86","description":"Here are some practical examples showing how to use jods in different contexts.","source":"@site/docs/examples.md","sourceDirName":".","slug":"/examples","permalink":"/jods/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/examples.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"jodsSidebar","previous":{"title":"\ud83d\udcda API Reference","permalink":"/jods/api-reference"},"next":{"title":"\ud83d\udd70\ufe0f Time-Travel Debugging","permalink":"/jods/time-travel-debugging"}}');var o=t(3420),a=t(3774);const i={sidebar_position:3},r="\ud83d\udcda Examples \ud83d\udca1 \ud83d\udc3f\ufe0f \ud83e\udd86",c={},d=[{value:"\ud83e\udde9 Basic Usage",id:"-basic-usage",level:2},{value:"\u269b\ufe0f React Integration",id:"\ufe0f-react-integration",level:2},{value:"\u26a1\ufe0f Preact Integration",id:"\ufe0f-preact-integration",level:2},{value:"\ud83d\udc42 Using <code>onUpdate</code> for Event Handling",id:"-using-onupdate-for-event-handling",level:2},{value:"\ud83d\udcbf Remix Integration",id:"-remix-integration",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"-examples--\ufe0f-",children:"\ud83d\udcda Examples \ud83d\udca1 \ud83d\udc3f\ufe0f \ud83e\udd86"})}),"\n",(0,o.jsx)(n.p,{children:"Here are some practical examples showing how to use jods in different contexts."}),"\n",(0,o.jsx)(n.h2,{id:"-basic-usage",children:"\ud83e\udde9 Basic Usage"}),"\n",(0,o.jsx)(n.p,{children:"This example demonstrates the core features of jods, including store creation, computed properties, change tracking, and JSON snapshots."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { store, json, onUpdate, computed, diff } from "jods";\n\n// Define the User interface\ninterface User {\n  firstName: string;\n  lastName: string;\n  email: string;\n  notifications: {\n    email: boolean;\n    push: boolean;\n  };\n  favorites: string[];\n  // Don\'t specify the type for fullName, let TypeScript infer it\n}\n\n// Create a user store\nconst user = store<User>({\n  firstName: "Burt",\n  lastName: "Macklin",\n  email: "Burt.Macklin@FBI.confidential",\n  notifications: {\n    email: true,\n    push: false,\n  },\n  favorites: [],\n});\n\n// Add a computed property\nuser.fullName = computed(() => `${user.firstName} ${user.lastName}`);\n\n// Get a JSON snapshot\nconsole.log("Initial state:", json(user));\n\n// Create a reference to previous state\nlet lastState = json(user);\n\n// Track update count to demonstrate granular updates\nlet updateCount = 0;\n\n// Subscribe to changes - onUpdate fires ONCE for EACH property change\nonUpdate(user, (newState, oldState) => {\n  updateCount++;\n  console.log(`User updated! (Update #${updateCount})`);\n  console.log("Changes:", diff(oldState, newState));\n  console.log("New state:", json(newState));\n\n  lastState = json(user);\n  console.log("Last state:", lastState);\n});\n\n// Make some changes - each one triggers a separate onUpdate callback\nuser.firstName = "Burt Macklin";\nuser.notifications.push = true;\nuser.favorites.push("undercover missions");\n\n// Show the final state\nconsole.log(`Total updates triggered: ${updateCount}`);\nconsole.log("Final state with computed values:", json(user));\n'})}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-react-integration",children:"\u269b\ufe0f React Integration"}),"\n",(0,o.jsxs)(n.p,{children:["This example shows how to use jods with React components using the ",(0,o.jsx)(n.code,{children:"useJods"})," hook."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import React, { ChangeEvent } from "react";\nimport { store, computed } from "jods";\nimport { useJods } from "jods/react";\n\n// Define the User interface\ninterface User {\n  firstName: string;\n  lastName: string;\n  occupation: string;\n  isUndercover: boolean;\n  skills: string[];\n}\n\n// Create a shared store\nconst userStore = store<User>({\n  firstName: "Burt",\n  lastName: "Macklin",\n  occupation: "FBI",\n  isUndercover: false,\n  skills: ["investigation", "disguise"],\n});\n\n// Add computed properties\nuserStore.fullName = computed(\n  () => `${userStore.firstName} ${userStore.lastName}`\n);\nuserStore.displayTitle = computed(\n  () =>\n    `${userStore.fullName}, ${\n      userStore.isUndercover ? "Undercover Agent" : userStore.occupation\n    }`\n);\n\n// A component that displays user info\nfunction UserProfile(): React.ReactElement {\n  // Use the hook to get the latest state\n  const user = useJods(userStore);\n\n  return (\n    <div className="user-profile">\n      <h2>{user.displayTitle}</h2>\n\n      <div className="user-skills">\n        <h3>Skills:</h3>\n        <ul>\n          {user.skills.map((skill, index) => (\n            <li key={index}>{skill}</li>\n          ))}\n        </ul>\n        <button onClick={() => userStore.skills.push("surveillance")}>\n          Add Surveillance Skill\n        </button>\n      </div>\n\n      <div className="user-actions">\n        <button onClick={() => (userStore.isUndercover = !user.isUndercover)}>\n          {user.isUndercover ? "Blow Cover" : "Go Undercover"}\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// A component that edits user info\nfunction UserEditor(): React.ReactElement {\n  const user = useJods(userStore);\n\n  const handleFirstNameChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    userStore.firstName = e.target.value;\n  };\n\n  const handleLastNameChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    userStore.lastName = e.target.value;\n  };\n\n  return (\n    <div className="user-editor">\n      <h3>Edit Agent Profile</h3>\n      <div>\n        <label>\n          First Name:\n          <input\n            type="text"\n            value={user.firstName}\n            onChange={handleFirstNameChange}\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          Last Name:\n          <input\n            type="text"\n            value={user.lastName}\n            onChange={handleLastNameChange}\n          />\n        </label>\n      </div>\n    </div>\n  );\n}\n\n// Main app component\nfunction App(): React.ReactElement {\n  return (\n    <div className="app">\n      <h1>JODS React Example</h1>\n      <UserProfile />\n      <UserEditor />\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-preact-integration",children:"\u26a1\ufe0f Preact Integration"}),"\n",(0,o.jsx)(n.p,{children:"jods includes native Preact support through a dedicated entry point. The API is identical to the React integration, making it easy to use in Preact applications."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { h } from "preact";\nimport { useState } from "preact/hooks";\nimport { store, computed } from "jods";\nimport { useJods } from "jods/preact";\n\n// Define a cart store\nconst cart = store({\n  items: [],\n  couponCode: "",\n});\n\n// Add computed properties\ncart.itemCount = computed(() => cart.items.length);\ncart.subtotal = computed(() =>\n  cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0)\n);\ncart.discount = computed(() =>\n  cart.couponCode === "SAVE20" ? cart.subtotal * 0.2 : 0\n);\ncart.total = computed(() => cart.subtotal - cart.discount);\n\n// Product list component\nfunction ProductList() {\n  const products = [\n    { id: 1, name: "Widget", price: 9.99 },\n    { id: 2, name: "Gadget", price: 14.99 },\n    { id: 3, name: "Doohickey", price: 19.99 },\n  ];\n\n  function addToCart(product) {\n    const existingItem = cart.items.find((item) => item.id === product.id);\n\n    if (existingItem) {\n      existingItem.quantity += 1;\n    } else {\n      cart.items.push({\n        id: product.id,\n        name: product.name,\n        price: product.price,\n        quantity: 1,\n      });\n    }\n  }\n\n  return (\n    <div class="products">\n      <h2>Products</h2>\n      {products.map((product) => (\n        <div key={product.id} class="product">\n          <h3>{product.name}</h3>\n          <p>${product.price.toFixed(2)}</p>\n          <button onClick={() => addToCart(product)}>Add to Cart</button>\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Shopping cart component\nfunction ShoppingCart() {\n  const cartState = useJods(cart);\n  const [coupon, setCoupon] = useState("");\n\n  function applyCoupon() {\n    cart.couponCode = coupon;\n  }\n\n  function removeItem(itemId) {\n    cart.items = cart.items.filter((item) => item.id !== itemId);\n  }\n\n  return (\n    <div class="cart">\n      <h2>Shopping Cart ({cartState.itemCount} items)</h2>\n\n      {cartState.items.length === 0 ? (\n        <p>Your cart is empty</p>\n      ) : (\n        <>\n          <ul>\n            {cartState.items.map((item) => (\n              <li key={item.id}>\n                {item.name} - ${item.price.toFixed(2)} x {item.quantity}\n                <button onClick={() => removeItem(item.id)}>Remove</button>\n              </li>\n            ))}\n          </ul>\n\n          <div class="coupon">\n            <input\n              type="text"\n              value={coupon}\n              onInput={(e) => setCoupon(e.target.value)}\n              placeholder="Coupon code"\n            />\n            <button onClick={applyCoupon}>Apply</button>\n          </div>\n\n          <div class="summary">\n            <p>Subtotal: ${cartState.subtotal.toFixed(2)}</p>\n            {cartState.discount > 0 && (\n              <p>Discount: -${cartState.discount.toFixed(2)}</p>\n            )}\n            <p class="total">Total: ${cartState.total.toFixed(2)}</p>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\n// Main app component\nexport function App() {\n  return (\n    <div class="app">\n      <h1>JODS Preact Shopping Cart Example</h1>\n      <div class="container">\n        <ProductList />\n        <ShoppingCart />\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"-using-onupdate-for-event-handling",children:["\ud83d\udc42 Using ",(0,o.jsx)(n.code,{children:"onUpdate"})," for Event Handling"]}),"\n",(0,o.jsxs)(n.p,{children:["This example shows how to use the ",(0,o.jsx)(n.code,{children:"onUpdate"})," function to track state changes."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { store, onUpdate } from "jods";\n\n// Create a store\nconst todoStore = store({\n  items: [],\n  filter: "all",\n});\n\n// Add a task to the store\nfunction addTask(title) {\n  todoStore.items.push({\n    id: Date.now(),\n    title,\n    completed: false,\n  });\n}\n\n// Track changes and perform side effects\nonUpdate(todoStore, (newState) => {\n  // Save to localStorage whenever state changes\n  localStorage.setItem("todos", JSON.stringify(newState.items));\n\n  // You could also sync with a server, log changes, etc.\n  console.log("Todo state updated:", newState);\n});\n\n// Add some tasks\naddTask("Learn jods");\naddTask("Build an app");\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-remix-integration",children:"\ud83d\udcbf Remix Integration"}),"\n",(0,o.jsx)(n.p,{children:"jods provides a first-class integration with \ud83d\udcbf Remix that simplifies state management across server and client. The integration combines loaders, actions, schema validation, and reactive client state."}),"\n",(0,o.jsxs)(n.p,{children:["Check out the \ud83d\udcbf ",(0,o.jsx)(n.a,{href:"/remix",children:"Remix Integration"})," section for detailed examples and documentation, including:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\ud83d\udd04 Defining stores with server-side data loading"}),"\n",(0,o.jsx)(n.li,{children:"\u2705 Creating form handlers with automatic validation"}),"\n",(0,o.jsx)(n.li,{children:"\u26a1 Implementing optimistic UI updates"}),"\n",(0,o.jsx)(n.li,{children:"\ud83d\udee3\ufe0f Integrating with Remix's routing system"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For more examples, check out the ",(0,o.jsx)(n.a,{href:"https://github.com/clamstew/jods/tree/main/examples",children:"GitHub repository"})," \ud83d\udc3f\ufe0f \ud83e\udd86."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);
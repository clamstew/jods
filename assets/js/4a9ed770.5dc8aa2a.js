"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7850],{3160:e=>{e.exports=JSON.parse('{"permalink":"/jods/blog/jods-journey","editUrl":"https://github.com/clamstew/jods/tree/main/docs/blog/2025-05-03-jods-journey.md","source":"@site/blog/2025-05-03-jods-journey.md","title":"The jods Journey: From Name-Squatting to Full Framework Integration","description":"What started as a simple npm name-squatting exercise has evolved into something far more meaningful in just under two weeks. Here\'s the story of how jods came to be.","date":"2025-05-03T00:00:00.000Z","tags":[{"inline":false,"label":"jods","permalink":"/jods/blog/tags/jods","description":"Posts about the jods state management library"},{"inline":false,"label":"React","permalink":"/jods/blog/tags/react","description":"Posts about React development"},{"inline":false,"label":"Remix","permalink":"/jods/blog/tags/remix","description":"Posts about the Remix framework"},{"inline":false,"label":"Signals","permalink":"/jods/blog/tags/signals","description":"Posts about signals and reactivity patterns"},{"inline":false,"label":"Reactivity","permalink":"/jods/blog/tags/reactivity","description":"Posts about reactive programming concepts"}],"readingTime":3.905,"hasTruncateMarker":false,"authors":[{"name":"Clay Stewart","title":"Creator of jods","url":"https://github.com/clamstew","page":{"permalink":"/jods/blog/authors/clay"},"socials":{"x":"https://x.com/clay_stewart","linkedin":"https://www.linkedin.com/in/claystewart/","github":"https://github.com/clamstew"},"imageURL":"/jods/img/clay-face.jpg","key":"clay"}],"frontMatter":{"slug":"jods-journey","title":"The jods Journey: From Name-Squatting to Full Framework Integration","authors":["clay"],"tags":["jods","react","remix","signals","reactivity"]},"unlisted":false}')},3774:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var a=n(6672);const s={},i=a.createContext(s);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:t},e.children)}},9896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var a=n(3160),s=n(3420),i=n(3774);const o={slug:"jods-journey",title:"The jods Journey: From Name-Squatting to Full Framework Integration",authors:["clay"],tags:["jods","react","remix","signals","reactivity"]},r="My jods Journey: From npm Name-Squatting to Full Framework Integration",l={authorsImageUrls:[void 0]},d=[{value:"The Beginning: A Short Name on npm",id:"the-beginning-a-short-name-on-npm",level:2},{value:"Creating a Simple API",id:"creating-a-simple-api",level:2},{value:"React and Beyond",id:"react-and-beyond",level:2},{value:"The Signal Revolution",id:"the-signal-revolution",level:2},{value:"Enter Remix: Rethinking the Model Layer",id:"enter-remix-rethinking-the-model-layer",level:2},{value:"The Road Ahead",id:"the-road-ahead",level:2},{value:"Final Thoughts",id:"final-thoughts",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"What started as a simple npm name-squatting exercise has evolved into something far more meaningful in just under two weeks. Here's the story of how jods came to be."}),"\n",(0,s.jsx)(t.h2,{id:"the-beginning-a-short-name-on-npm",children:"The Beginning: A Short Name on npm"}),"\n",(0,s.jsxs)(t.p,{children:["About two weeks ago, I decided to claim a short, memorable name on npm \u2014 ",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/jods",children:"@jods"})," (JavaScript Object Dynamics System). Initially, after playing around with ",(0,s.jsx)(t.a,{href:"https://github.com/taskforcesh/bullmq",children:"BullMQ"}),", I thought it might become a job queuing system (jods = jobs, get it?). But I quickly pivoted when I had a loose idea about creating a state management library instead. At that point, I just wanted to secure a name that was easy to remember and type."]}),"\n",(0,s.jsx)(t.h2,{id:"creating-a-simple-api",children:"Creating a Simple API"}),"\n",(0,s.jsx)(t.p,{children:"After securing the name, I started to flesh out what this library could be. I knew I wanted something with:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"\ud83c\udf1f A simple, intuitive API"}),"\n",(0,s.jsx)(t.li,{children:"\ud83c\udfaf Zero dependencies"}),"\n",(0,s.jsx)(t.li,{children:"\ud83d\udd0c Easy integration with any framework"}),"\n",(0,s.jsx)(t.li,{children:"\ud83d\udcf8 JSON snapshot capability out of the box"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"I quickly realized that with a proxy-based approach, I could create something that felt natural to use \u2014 just plain JavaScript objects that magically become reactive."}),"\n",(0,s.jsx)(t.h2,{id:"react-and-beyond",children:"React and Beyond"}),"\n",(0,s.jsx)(t.p,{children:"Once I had the core reactivity system working, I moved on to integrating with React. This is where things got interesting. I found that with the proxy approach, integrating with React was almost trivial:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:'// Create a store\nconst user = store({\n  firstName: "Burt",\n  lastName: "Macklin",\n  mood: "curious",\n});\n\n// In your React component\nfunction Profile() {\n  const userData = useJods(user);\n\n  return (\n    <div>\n      <h1>Hello, {userData.firstName}</h1>\n      <p>Mood: {userData.mood}</p>\n\n      {/* Direct state mutations - no actions, reducers, or dispatchers needed */}\n      <button onClick={() => (user.mood = "sneaky")}>Go Undercover</button>\n      <button onClick={() => (user.firstName = "Burt Macklin")}>\n        Use FBI Name\n      </button>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:['The simplicity compared to some other libraries surprised me \ud83e\udd14. No need for selectors, actions, or reducers \u2014 just directly use the object. That "aha moment" when I realized I could just write ',(0,s.jsx)(t.code,{children:'user.mood = "sneaky"'})," and have the UI update automatically was when I knew this approach had merit. \ud83d\ude4c"]}),"\n",(0,s.jsx)(t.h2,{id:"the-signal-revolution",children:"The Signal Revolution"}),"\n",(0,s.jsxs)(t.p,{children:["As the project progressed, I couldn't ignore the growing popularity of signals in frameworks like Preact, Solid, and Angular. The ",(0,s.jsx)(t.a,{href:"https://github.com/tc39/proposal-signals",children:"proposed TC39 signals spec"})," caught my attention, and I even ",(0,s.jsx)(t.a,{href:"https://github.com/clamstew/jods/issues/11",children:"opened an issue"})," to track our potential adoption of native signals."]}),"\n",(0,s.jsxs)(t.p,{children:["So one morning, I created a ",(0,s.jsx)(t.a,{href:"https://github.com/clamstew/jods/pull/20",children:"branch to rewrite jods with signals"})," as the foundation. This enabled more fine-grained reactivity \u2014 only updating components when the specific properties they use change, rather than the entire store. The community showed interest too, with discussions emerging around ",(0,s.jsx)(t.a,{href:"https://github.com/clamstew/jods/issues/23",children:"signal integration strategies"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"enter-remix-rethinking-the-model-layer",children:"Enter Remix: Rethinking the Model Layer"}),"\n",(0,s.jsx)(t.p,{children:"With the core reactivity model working well, I decided to tackle one of my favorite meta-frameworks: Remix. Remix is incredibly powerful, but there's sometimes boilerplate when setting up loaders, actions, and form handling."}),"\n",(0,s.jsx)(t.p,{children:"I realized jods could serve as a bridge \u2014 creating a more model-centric approach where your data models define their:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"\ud83d\udcdd Schema validation"}),"\n",(0,s.jsx)(t.li,{children:"\ud83d\udd04 Server-side loaders"}),"\n",(0,s.jsx)(t.li,{children:"\ud83d\udccb Form handlers"}),"\n",(0,s.jsx)(t.li,{children:"\u26a1\ufe0f Client-side reactivity"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The result is what we now have in ",(0,s.jsx)(t.code,{children:"jods/remix"})," \u2014 a streamlined approach that reduces boilerplate and brings a more familiar model-view pattern to Remix development:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Define your model once\nexport const user = defineStore({\n  name: "user",\n  schema: z.object({\n    name: z.string(),\n    email: z.string().email(),\n  }),\n  defaults: {\n    name: "Guest",\n    email: "",\n  },\n  handlers: {\n    async updateProfile({ current, form }) {\n      // Update logic\n    },\n  },\n  loader: async ({ request }) => {\n    // Load user data\n  },\n});\n\n// Export ready-to-use loaders and actions\nexport const loader = withJods([user]);\nexport const action = user.action;\n'})}),"\n",(0,s.jsx)(t.p,{children:"Then in your components, simply use:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'function ProfilePage() {\n  const userData = useJodsStore(user);\n  const form = useJodsForm(user.actions.updateProfile);\n\n  return (\n    <form {...form.props}>\n      <input name="name" defaultValue={userData.name} />\n      <button type="submit">Update</button>\n    </form>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"the-road-ahead",children:"The Road Ahead"}),"\n",(0,s.jsx)(t.p,{children:"While I'm thrilled with how far jods has come in such a short time, there's still much more to explore:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\ud83d\udcbe Enhanced persistence options (",(0,s.jsx)(t.a,{href:"https://github.com/clamstew/jods/issues/5",children:"#5"}),")"]}),"\n",(0,s.jsxs)(t.li,{children:["\ud83d\udd04 Remote syncing capabilities (",(0,s.jsx)(t.a,{href:"https://github.com/clamstew/jods/issues/7",children:"#7"}),")"]}),"\n",(0,s.jsxs)(t.li,{children:["\ud83d\udce1 Streaming updates from server sources (",(0,s.jsx)(t.a,{href:"https://github.com/clamstew/jods/issues/9",children:"#9"}),")"]}),"\n",(0,s.jsx)(t.li,{children:"\u23f0 Time-travel debugging"}),"\n",(0,s.jsx)(t.li,{children:"\ud83d\udee0\ufe0f Developer tools"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"final-thoughts",children:"Final Thoughts"}),"\n",(0,s.jsx)(t.p,{children:"What started as a simple name registration has evolved into a project I'm genuinely excited about. jods reflects my belief that state management should be as simple and intuitive as possible, while still being powerful enough for real-world applications."}),"\n",(0,s.jsx)(t.p,{children:"I never expected to build all this in less than two weeks, but it's amazing what you can accomplish when you're passionate about solving a problem you care about."}),"\n",(0,s.jsx)(t.p,{children:"I'd love to hear your thoughts and see what you build with jods!"}),"\n",(0,s.jsxs)(t.p,{children:["\u2014 ",(0,s.jsx)(t.a,{href:"https://www.github.com/clamstew",children:"clamstew"})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9941],{3774:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6672);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}},8259:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"remix/migration-guide","title":"Migrating to jods","description":"Step-by-step guide to migrate from Remix loaders/actions to jods","source":"@site/docs/remix/migration-guide.md","sourceDirName":"remix","slug":"/remix/migration-guide","permalink":"/remix/migration-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/remix/migration-guide.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Migrating to jods","description":"Step-by-step guide to migrate from Remix loaders/actions to jods"},"sidebar":"jodsSidebar","previous":{"title":"\ud83e\ude9d useJods - Unified Hook","permalink":"/remix/useJods"},"next":{"title":"\ud83e\udde9 Common Patterns","permalink":"/remix/common-patterns"}}');var s=t(3420),r=t(3774);const i={sidebar_position:3,title:"Migrating to jods",description:"Step-by-step guide to migrate from Remix loaders/actions to jods"},a="\ud83d\ude80 Migrating from Loaders/Actions to jods",d={},c=[{value:"\ud83d\udee3\ufe0f Step-by-Step Migration",id:"\ufe0f-step-by-step-migration",level:2},{value:"\ud83d\udd0d 1. Identify Loaders to Convert",id:"-1-identify-loaders-to-convert",level:3},{value:"\ud83c\udfd7\ufe0f 2. Create a jods Store",id:"\ufe0f-2-create-a-jods-store",level:3},{value:"\ud83d\udd04 3. Convert Actions to Handlers",id:"-3-convert-actions-to-handlers",level:3},{value:"\ud83e\udde9 4. Update Components",id:"-4-update-components",level:3},{value:"\ud83d\udd04 Incremental Adoption with <code>connectActionToJods</code>",id:"-incremental-adoption-with-connectactiontojods",level:2},{value:"\u2705 Migration Checklist",id:"-migration-checklist",level:2},{value:"\ud83d\udd00 Handling Redirects",id:"-handling-redirects",level:2},{value:"\ud83d\udd12 Handling Authorization",id:"-handling-authorization",level:2},{value:"\ud83d\udd04 Migrating from Individual Hooks to useJods",id:"-migrating-from-individual-hooks-to-usejods",level:2},{value:"Before: Using Individual Hooks",id:"before-using-individual-hooks",level:3},{value:"After: Using the Unified useJods Hook",id:"after-using-the-unified-usejods-hook",level:3},{value:"Benefits of Using the Unified Hook",id:"benefits-of-using-the-unified-hook",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-migrating-from-loadersactions-to-jods",children:"\ud83d\ude80 Migrating from Loaders/Actions to jods"})}),"\n",(0,s.jsx)(n.p,{children:"This guide helps you incrementally migrate your existing Remix application to use jods stores for state management."}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-step-by-step-migration",children:"\ud83d\udee3\ufe0f Step-by-Step Migration"}),"\n",(0,s.jsx)(n.h3,{id:"-1-identify-loaders-to-convert",children:"\ud83d\udd0d 1. Identify Loaders to Convert"}),"\n",(0,s.jsx)(n.p,{children:"Look for loaders that fetch and return data that would benefit from reactivity:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Before: Traditional loader\nexport const loader = async ({ request }) => {\n  const user = await getUserFromDatabase();\n  return json({ user });\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-2-create-a-jods-store",children:"\ud83c\udfd7\ufe0f 2. Create a jods Store"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// After: jods store\nimport { defineStore } from "jods/remix";\nimport { z } from "zod";\n\nexport const user = defineStore({\n  name: "user",\n  schema: z.object({\n    name: z.string(),\n    email: z.string().email(),\n    // other fields\n  }),\n  loader: async ({ request }) => {\n    return await getUserFromDatabase();\n  },\n});\n\n// Simplified loader\nimport { withJods } from "jods/remix";\nexport const loader = withJods([user]);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"-3-convert-actions-to-handlers",children:"\ud83d\udd04 3. Convert Actions to Handlers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Before: Traditional action\nexport const action = async ({ request }) => {\n  const form = await request.formData();\n  const name = form.get("name");\n  await updateUser({ name });\n  return redirect("/profile");\n};\n\n// After: jods handler\nexport const user = defineStore({\n  // ...existing store config\n  handlers: {\n    async updateProfile({ current, form }) {\n      const name = form.get("name");\n      await updateUser({ name });\n      return { ...current, name };\n    },\n  },\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"-4-update-components",children:"\ud83e\udde9 4. Update Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'// Before: Using useLoaderData\nimport { useLoaderData } from "@remix-run/react";\n\nexport default function Profile() {\n  const { user } = useLoaderData<typeof loader>();\n\n  return (\n    <div>\n      <h1>Hello, {user.name}</h1>\n      <Form method="post">\n        <input name="name" defaultValue={user.name} />\n        <button type="submit">Update Profile</button>\n      </Form>\n    </div>\n  );\n}\n\n// After: Using jods with the recommended useJods hook\nimport { useJods } from "jods/remix";\nimport { user } from "~/jods/user.jods";\n\nexport default function Profile() {\n  const { stores, actions, loaderData } = useJods(user, ["updateProfile"]);\n\n  return (\n    <div>\n      <h1>Hello, {stores.name}</h1>\n      <actions.updateProfile.Form>\n        <input name="name" defaultValue={stores.name} />\n        <button type="submit">Update Profile</button>\n      </actions.updateProfile.Form>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"-incremental-adoption-with-connectactiontojods",children:["\ud83d\udd04 Incremental Adoption with ",(0,s.jsx)(n.code,{children:"connectActionToJods"})]}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes you can't migrate a whole action at once. Use ",(0,s.jsx)(n.code,{children:"connectActionToJods"})," to gradually adopt jods:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { connectActionToJods } from "jods/remix";\nimport { user } from "~/jods/user.jods";\n\n// Keep your existing action\nconst existingAction = async ({ request }) => {\n  const form = await request.formData();\n  const name = form.get("name");\n  const updatedUser = await updateUser({ name });\n  return updatedUser;\n};\n\n// Connect it to jods\nexport const action = connectActionToJods(user, existingAction);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-migration-checklist",children:"\u2705 Migration Checklist"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","\ud83d\udd0d ",(0,s.jsx)(n.strong,{children:"Identify state"})," that would benefit from reactivity"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","\ud83d\udcdd ",(0,s.jsx)(n.strong,{children:"Define schemas"})," using Zod for type safety"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","\ud83c\udfd7\ufe0f ",(0,s.jsx)(n.strong,{children:"Create jods stores"})," for each data domain"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","\ud83d\udd04 ",(0,s.jsx)(n.strong,{children:"Convert loaders"})," to use ",(0,s.jsx)(n.code,{children:"withJods"})]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","\ud83d\udee0\ufe0f ",(0,s.jsx)(n.strong,{children:"Migrate actions"})," to store handlers"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","\ud83e\udde9 ",(0,s.jsx)(n.strong,{children:"Update components"})," to use ",(0,s.jsx)(n.code,{children:"useJods"})," hook"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-handling-redirects",children:"\ud83d\udd00 Handling Redirects"}),"\n",(0,s.jsx)(n.p,{children:"When you need to redirect after a form submission:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { redirect } from "@remix-run/node";\n\nexport const user = defineStore({\n  // ...\n  handlers: {\n    async createUser({ current, form }) {\n      const user = await createUserInDb({\n        name: form.get("name"),\n        email: form.get("email"),\n      });\n\n      // Throw a redirect instead of returning state\n      // This will be handled by Remix\n      throw redirect(`/users/${user.id}`);\n    },\n  },\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-handling-authorization",children:"\ud83d\udd12 Handling Authorization"}),"\n",(0,s.jsx)(n.p,{children:"For protected routes and data:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'export const protectedData = defineStore({\n  name: "protectedData",\n  schema: z.object({\n    /* ... */\n  }),\n  loader: async ({ request }) => {\n    // Check authentication\n    const user = await authenticateUser(request);\n    if (!user) {\n      throw redirect("/login");\n    }\n\n    // Get data for authenticated user\n    return getProtectedData(user.id);\n  },\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-migrating-from-individual-hooks-to-usejods",children:"\ud83d\udd04 Migrating from Individual Hooks to useJods"}),"\n",(0,s.jsxs)(n.p,{children:["If you're already using jods with the individual hooks (",(0,s.jsx)(n.code,{children:"useJodsStore"})," and ",(0,s.jsx)(n.code,{children:"useJodsForm"}),"), here's how to migrate to the new unified ",(0,s.jsx)(n.code,{children:"useJods"})," hook:"]}),"\n",(0,s.jsx)(n.h3,{id:"before-using-individual-hooks",children:"Before: Using Individual Hooks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useJodsStore, useJodsForm } from "jods/remix";\nimport { user } from "~/jods/user.jods";\nimport { useLoaderData } from "@remix-run/react";\n\nexport default function Profile() {\n  // Access store data\n  const userData = useJodsStore(user);\n\n  // Get loader data separately\n  const loaderData = useLoaderData();\n\n  // Access form handlers separately\n  const updateProfileForm = useJodsForm(user, "updateProfile");\n  const changePasswordForm = useJodsForm(user, "changePassword");\n\n  return (\n    <div>\n      <h1>{loaderData.title}</h1>\n      <p>Hello, {userData.name}</p>\n\n      <updateProfileForm.Form>\n        <input name="name" defaultValue={userData.name} />\n        <button type="submit">Update Profile</button>\n      </updateProfileForm.Form>\n\n      <changePasswordForm.Form>\n        <input type="password" name="password" />\n        <button type="submit">Change Password</button>\n      </changePasswordForm.Form>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"after-using-the-unified-usejods-hook",children:"After: Using the Unified useJods Hook"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useJods } from "jods/remix";\nimport { user } from "~/jods/user.jods";\n\nexport default function Profile() {\n  // Get everything in one hook call\n  const { stores, actions, loaderData } = useJods(user, [\n    "updateProfile",\n    "changePassword",\n  ]);\n\n  return (\n    <div>\n      <h1>{loaderData.title}</h1>\n      <p>Hello, {stores.name}</p>\n\n      <actions.updateProfile.Form>\n        <input name="name" defaultValue={stores.name} />\n        <button type="submit">Update Profile</button>\n      </actions.updateProfile.Form>\n\n      <actions.changePassword.Form>\n        <input type="password" name="password" />\n        <button type="submit">Change Password</button>\n      </actions.changePassword.Form>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"benefits-of-using-the-unified-hook",children:"Benefits of Using the Unified Hook"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Less Code"}),": Fewer imports and hook calls"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Better Organization"}),": All related functionality grouped together"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Direct Mutations"}),": Ability to directly update properties (",(0,s.jsx)(n.code,{children:'stores.name = "New Name"'}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Automatic Access to Loader Data"}),": No need for separate ",(0,s.jsx)(n.code,{children:"useLoaderData"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Improved DX"}),": Actions organized by name for better discoverability"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);
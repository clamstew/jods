"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7844],{3774:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>l});var s=n(6672);const r={},t=s.createContext(r);function o(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:i},e.children)}},8066:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>h,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"philosophy/remix-philosophy","title":"The Philosophy Behind Remixing Remix","description":"How jods brings Rails-like conventions to Remix for a more seamless full-stack experience","source":"@site/docs/philosophy/remix-philosophy.md","sourceDirName":"philosophy","slug":"/philosophy/remix-philosophy","permalink":"/jods/philosophy/remix-philosophy","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/philosophy/remix-philosophy.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"The Philosophy Behind Remixing Remix","description":"How jods brings Rails-like conventions to Remix for a more seamless full-stack experience","sidebar_position":3}}');var r=n(3420),t=n(3774);const o={title:"The Philosophy Behind Remixing Remix",description:"How jods brings Rails-like conventions to Remix for a more seamless full-stack experience",sidebar_position:3},l="The Philosophy Behind Remixing Remix",h={},d=[{value:"A Brief History of Web Development Patterns",id:"a-brief-history-of-web-development-patterns",level:2},{value:"Where jods Fits In: Remixing the Remix",id:"where-jods-fits-in-remixing-the-remix",level:2},{value:"The Rails Philosophy Applied to Remix",id:"the-rails-philosophy-applied-to-remix",level:3},{value:"The Best of All Worlds",id:"the-best-of-all-worlds",level:2},{value:"Getting Started with Remix on jods",id:"getting-started-with-remix-on-jods",level:2}];function a(e){const i={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"the-philosophy-behind-remixing-remix",children:"The Philosophy Behind Remixing Remix"})}),"\n",(0,r.jsx)(i.h2,{id:"a-brief-history-of-web-development-patterns",children:"A Brief History of Web Development Patterns"}),"\n",(0,r.jsx)(i.p,{children:"The evolution of web development has taken us through several paradigms:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Traditional Server Rendering"})," - PHP, Rails, Django (2000s)"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Server generated all HTML"}),"\n",(0,r.jsx)(i.li,{children:"Forms submitted to endpoints that returned new pages"}),"\n",(0,r.jsx)(i.li,{children:"Simple mental model with clear data flow"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Client-Side SPA Revolution"})," (2010s)"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"JavaScript frameworks took over rendering"}),"\n",(0,r.jsx)(i.li,{children:"API-based data fetching"}),"\n",(0,r.jsx)(i.li,{children:"Powerful UX, but complex state management"}),"\n",(0,r.jsx)(i.li,{children:"Often disconnected from server-side logic"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Remix's Return to Server Principles"})," (2020s)"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Brought back forms, progressive enhancement"}),"\n",(0,r.jsx)(i.li,{children:"Server-side rendering with client hydration"}),"\n",(0,r.jsx)(i.li,{children:"Nested routing with data loading"}),"\n",(0,r.jsx)(i.li,{children:"Simplified mental model with clear boundaries"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"where-jods-fits-in-remixing-the-remix",children:"Where jods Fits In: Remixing the Remix"}),"\n",(0,r.jsx)(i.p,{children:'Remix reintroduced many of the benefits of traditional server-side rendering while maintaining modern frontend capabilities. But we saw an opportunity to take it further by adding Rails-like "convention over configuration" principles:'}),"\n",(0,r.jsx)(i.h3,{id:"the-rails-philosophy-applied-to-remix",children:"The Rails Philosophy Applied to Remix"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.a,{href:"https://rubyonrails.org/",children:"Ruby on Rails"})," revolutionized web development with its opinionated approach and emphasis on developer happiness. Key principles included:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Convention over Configuration"}),' - Sensible defaults that "just work"']}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Don't Repeat Yourself (DRY)"})," - Minimize redundancy in your codebase"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Active Record Pattern"})," - Models that know how to persist themselves"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"jods brings these principles to Remix through:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Durable, Reusable Objects"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Server and client state unified in one model"}),"\n",(0,r.jsx)(i.li,{children:"Objects that know how to hydrate, persist, and validate themselves"}),"\n",(0,r.jsx)(i.li,{children:"Automatically synchronized across the full stack"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Declarative Data Layer"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Define your data model once, use it everywhere"}),"\n",(0,r.jsx)(i.li,{children:"Type-safe across the entire application"}),"\n",(0,r.jsx)(i.li,{children:"Implicit actions that don't require manual handlers"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Convention-Based Form Handling"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Forms that automatically dispatch to the right actions"}),"\n",(0,r.jsx)(i.li,{children:"Built-in validation using Zod schemas"}),"\n",(0,r.jsx)(i.li,{children:"Progressive enhancement that works with or without JavaScript"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"the-best-of-all-worlds",children:"The Best of All Worlds"}),"\n",(0,r.jsx)(i.p,{children:"jods aims to combine:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Remix's server-first approach and nested routing"}),"\n",(0,r.jsx)(i.li,{children:"Rails' convention over configuration philosophy"}),"\n",(0,r.jsx)(i.li,{children:"Modern TypeScript's strong typing and developer experience"}),"\n",(0,r.jsx)(i.li,{children:"React's component model and client-side capabilities"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"The result is a development experience that feels both familiar to those who remember the simplicity of Rails/PHP development, yet fully equipped for modern application requirements."}),"\n",(0,r.jsx)(i.h2,{id:"getting-started-with-remix-on-jods",children:"Getting Started with Remix on jods"}),"\n",(0,r.jsx)(i.p,{children:"If you're ready to experience this unified approach:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/remix",children:"Remix Integration Guide"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/concepts/active-record",children:"Active Record Pattern in jods"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/guides/rails-to-jods",children:"Migration Guide for Rails Developers"})}),"\n"]})]})}function c(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);
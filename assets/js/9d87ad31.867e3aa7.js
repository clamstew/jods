"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9608],{3774:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(6672);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},7379:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"remix/performance-tips","title":"Performance Tips","description":"Optimize your Remix application with jods","source":"@site/docs/remix/performance-tips.md","sourceDirName":"remix","slug":"/remix/performance-tips","permalink":"/jods/remix/performance-tips","draft":false,"unlisted":false,"editUrl":"https://github.com/clamstew/jods/tree/main/docs/docs/remix/performance-tips.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Performance Tips","description":"Optimize your Remix application with jods"},"sidebar":"jodsSidebar","previous":{"title":"\ud83e\udde9 Common Patterns","permalink":"/jods/remix/common-patterns"},"next":{"title":"\ud83d\udcda API Reference","permalink":"/jods/remix/api-reference"}}');var o=t(3420),a=t(3774);const i={sidebar_position:4,title:"Performance Tips",description:"Optimize your Remix application with jods"},s="\ud83d\ude80 Performance Optimization",c={},d=[{value:"\ud83d\udca7 Selective Hydration",id:"-selective-hydration",level:2},{value:"\ud83e\udda5 Lazy Loading Stores",id:"-lazy-loading-stores",level:2},{value:"\ud83d\udddc\ufe0f Minimizing State Size",id:"\ufe0f-minimizing-state-size",level:2},{value:"\u26a1 Optimizing Computed Values",id:"-optimizing-computed-values",level:2},{value:"\ud83d\udce6 Optimizing Bundle Size",id:"-optimizing-bundle-size",level:2},{value:"\ud83d\udcbe Caching Strategies",id:"-caching-strategies",level:2},{value:"\ud83d\udd2e Prefetching Data",id:"-prefetching-data",level:2},{value:"\ud83d\udcdd Optimizing Form Submissions",id:"-optimizing-form-submissions",level:2},{value:"\u23f1\ufe0f Debouncing and Throttling",id:"\ufe0f-debouncing-and-throttling",level:2},{value:"\ud83d\udcca Performance Monitoring",id:"-performance-monitoring",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"-performance-optimization",children:"\ud83d\ude80 Performance Optimization"})}),"\n",(0,o.jsx)(n.p,{children:"This guide provides tips and techniques for optimizing performance when using jods with Remix applications."}),"\n",(0,o.jsx)(n.h2,{id:"-selective-hydration",children:"\ud83d\udca7 Selective Hydration"}),"\n",(0,o.jsx)(n.p,{children:"Only hydrate stores that are needed for the current route:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'// In root.tsx\nimport { RehydrateJodsStores } from "jods/remix";\n\nexport default function App() {\n  return (\n    <html>\n      <head>{/* ... */}</head>\n      <body>\n        {/* Only hydrate stores relevant to the current route */}\n        <RehydrateJodsStores hydrate={["user", "settings"]} />\n        <Outlet />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can make the hydration dynamic based on the route:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'// In root.tsx\nexport default function App() {\n  const location = useLocation();\n  const storesForRoute = useCallback(() => {\n    // Determine which stores to hydrate based on route\n    if (location.pathname.startsWith("/admin")) {\n      return ["user", "adminSettings", "permissions"];\n    } else if (location.pathname.startsWith("/shop")) {\n      return ["user", "cart", "products"];\n    }\n\n    // Default stores to hydrate\n    return ["user", "settings"];\n  }, [location.pathname]);\n\n  return (\n    <html>\n      <head>{/* ... */}</head>\n      <body>\n        <RehydrateJodsStores hydrate={storesForRoute()} />\n        <Outlet />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-lazy-loading-stores",children:"\ud83e\udda5 Lazy Loading Stores"}),"\n",(0,o.jsx)(n.p,{children:"Dynamically import stores only when needed:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'// Lazy load components that use jods stores\nimport { lazy, Suspense } from "react";\n\nconst AdminDashboard = lazy(() => import("./AdminDashboard"));\n\nexport default function AdminRoute() {\n  return (\n    <Suspense fallback={<LoadingSpinner />}>\n      <AdminDashboard />\n    </Suspense>\n  );\n}\n\n// In AdminDashboard.tsx, import the store\nimport { adminStore } from "~/jods/admin.jods";\n'})}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-minimizing-state-size",children:"\ud83d\udddc\ufe0f Minimizing State Size"}),"\n",(0,o.jsx)(n.p,{children:"Keep your store state lean to optimize performance:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'export const userStore = defineStore({\n  name: "user",\n  schema: z.object({\n    // Include only what you need\n    id: z.string(),\n    name: z.string(),\n    email: z.string().email(),\n    // Avoid including large blobs of data\n    // avatar: z.string(), // Don\'t include large base64 encoded images\n    // preferences: z.object({ ... }) // Split into separate store if large\n  }),\n  // ...\n});\n\n// Create separate stores for related but less frequently used data\nexport const userPreferencesStore = defineStore({\n  name: "userPreferences",\n  schema: z.object({\n    userId: z.string(),\n    theme: z.enum(["light", "dark", "system"]),\n    notifications: z.boolean(),\n    // ... other preferences\n  }),\n  // ...\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-optimizing-computed-values",children:"\u26a1 Optimizing Computed Values"}),"\n",(0,o.jsx)(n.p,{children:"Use computed values efficiently:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'export const cart = defineStore({\n  name: "cart",\n  schema: z.object({\n    items: z.array(\n      z.object({\n        id: z.string(),\n        name: z.string(),\n        price: z.number(),\n        quantity: z.number(),\n      })\n    ),\n  }),\n  // ...\n});\n\n// Define computed values outside the component to avoid recreation\ncart.itemCount = computed(() => cart.items.length);\n\n// For expensive calculations, add memoization\ncart.totalPrice = computed(() => {\n  // This will only recalculate when cart.items changes\n  return cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n});\n\n// In your component\nfunction CartSummary() {\n  const cartData = useJodsStore(cart);\n\n  return (\n    <div>\n      <span>{cartData.itemCount} items</span>\n      <span>Total: ${cartData.totalPrice.toFixed(2)}</span>\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-optimizing-bundle-size",children:"\ud83d\udce6 Optimizing Bundle Size"}),"\n",(0,o.jsx)(n.p,{children:"Split your jods configuration to minimize bundle size:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// Instead of one large file with all stores\n// Split into domain-specific files\n\n// user.jods.ts\nexport const user = defineStore({\n  name: "user",\n  // ...\n});\n\n// cart.jods.ts\nexport const cart = defineStore({\n  name: "cart",\n  // ...\n});\n\n// Only import the stores you need in each route\nimport { user } from "~/jods/user.jods";\n// No need to import cart store in user profile route\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-caching-strategies",children:"\ud83d\udcbe Caching Strategies"}),"\n",(0,o.jsx)(n.p,{children:"Implement appropriate caching for your data:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'export const productCatalog = defineStore({\n  name: "productCatalog",\n  schema: productCatalogSchema,\n  loader: async ({ request }) => {\n    const url = new URL(request.url);\n    const headers = new Headers();\n\n    // Add cache headers for static data that rarely changes\n    setJodsCacheControl(headers, {\n      maxAge: 3600, // 1 hour\n      staleWhileRevalidate: 86400, // 1 day\n      private: false, // Can be cached by CDNs\n    });\n\n    return getProductCatalog();\n  },\n});\n\nexport const userCart = defineStore({\n  name: "userCart",\n  schema: userCartSchema,\n  loader: async ({ request }) => {\n    const headers = new Headers();\n\n    // For user-specific dynamic data\n    setJodsCacheControl(headers, {\n      maxAge: 0, // Don\'t cache\n      private: true, // User-specific data\n    });\n\n    return getUserCart(request);\n  },\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-prefetching-data",children:"\ud83d\udd2e Prefetching Data"}),"\n",(0,o.jsx)(n.p,{children:"Prefetch data for routes the user is likely to visit next:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { prefetchJodsRoutes } from "jods/remix";\n\nfunction ProductPage() {\n  const { products } = useJodsStore(productStore);\n\n  // Prefetch data for product detail pages\n  const prefetchProduct = (productId) => {\n    prefetchJodsRoutes(`/products/${productId}`);\n  };\n\n  return (\n    <div>\n      <h1>Products</h1>\n      <ul>\n        {products.map((product) => (\n          <li key={product.id} onMouseEnter={() => prefetchProduct(product.id)}>\n            <Link to={`/products/${product.id}`}>{product.name}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-optimizing-form-submissions",children:"\ud83d\udcdd Optimizing Form Submissions"}),"\n",(0,o.jsx)(n.p,{children:"Reduce unnecessary form submissions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'function ProfileForm() {\n  const userData = useJodsStore(user);\n  const form = useJodsForm(user.actions.updateProfile);\n  const { isSubmitting } = useJodsFetchers("user.updateProfile");\n\n  // Track form state to prevent unnecessary submissions\n  const [formState, setFormState] = useState({\n    name: userData.name,\n    email: userData.email,\n  });\n\n  // Only enable submit if values have changed\n  const hasChanges =\n    formState.name !== userData.name || formState.email !== userData.email;\n\n  return (\n    <form {...form.props}>\n      <input\n        name="name"\n        value={formState.name}\n        onChange={(e) => setFormState({ ...formState, name: e.target.value })}\n      />\n      <input\n        name="email"\n        value={formState.email}\n        onChange={(e) => setFormState({ ...formState, email: e.target.value })}\n      />\n      <button type="submit" disabled={isSubmitting || !hasChanges}>\n        Update Profile\n      </button>\n    </form>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-debouncing-and-throttling",children:"\u23f1\ufe0f Debouncing and Throttling"}),"\n",(0,o.jsx)(n.p,{children:"For real-time search or filtering, implement debouncing:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { useCallback, useState } from "react";\nimport { useJodsStore } from "jods/remix";\nimport { debounce } from "~/utils/debounce";\n\nfunction SearchBar() {\n  const [searchTerm, setSearchTerm] = useState("");\n  const searchStore = useJodsStore(search);\n\n  // Debounce the search function to avoid too many requests\n  const debouncedSearch = useCallback(\n    debounce((term) => {\n      search.actions.search(term);\n    }, 300),\n    []\n  );\n\n  const handleChange = (e) => {\n    const term = e.target.value;\n    setSearchTerm(term);\n    debouncedSearch(term);\n  };\n\n  return (\n    <div>\n      <input\n        type="search"\n        value={searchTerm}\n        onChange={handleChange}\n        placeholder="Search..."\n      />\n      {searchStore.loading && <LoadingIndicator />}\n      <SearchResults results={searchStore.results} />\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-performance-monitoring",children:"\ud83d\udcca Performance Monitoring"}),"\n",(0,o.jsx)(n.p,{children:"Add monitoring to identify performance bottlenecks:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { onUpdate } from "jods/remix";\n\n// Monitor store update performance\nonUpdate(userStore, (newState, oldState) => {\n  const updateTime = performance.now();\n\n  // Log large state changes\n  const stateSize = JSON.stringify(newState).length;\n  if (stateSize > 10000) {\n    console.warn(`Large state update: ${stateSize} bytes`);\n  }\n\n  // Check for expensive updates\n  const endTime = performance.now();\n  const duration = endTime - updateTime;\n\n  if (duration > 50) {\n    console.warn(`Slow state update: ${duration}ms`);\n  }\n});\n'})}),"\n",(0,o.jsx)(n.p,{children:"By applying these performance optimization techniques, you can ensure your Remix application with jods remains fast and responsive, even as your application grows in complexity."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);